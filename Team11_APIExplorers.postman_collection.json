{
	"info": {
		"_postman_id": "37968594-8b05-4bf8-a5ea-2548868acad6",
		"name": "Team11_APIExplorers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37274055",
		"_collection_link": "https://team11apiexplorersjul24.postman.co/workspace/Team11_APIExplorers_Jul24~d0334863-9256-4f5f-8771-7628c87e74b7/collection/37274055-37968594-8b05-4bf8-a5ea-2548868acad6?action=share&source=collection_link&creator=37274055"
	},
	"item": [
		{
			"name": "Dietician",
			"item": [
				{
					"name": "create dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Create Dietician\");\r",
									"// Assigning userloginEmail and password to collection Variables\r",
									"\r",
									"bodyData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"dieticianLoginEmail\", bodyData.Email);\r",
									"pm.collectionVariables.set(\"dieticianPassword\", bodyData.loginPassword);\r",
									"\r",
									"dieticianId1 = pm.collectionVariables.get(\"dieticianId1\");\r",
									"\r",
									"if (!dieticianId1){\r",
									"    pm.collectionVariables.set(\"dieticianId1\", bodyData.id);    \r",
									"    \r",
									"}else {\r",
									"        pm.collectionVariables.set(\"dieticianId2\" , bodyData.id);   \r",
									"}\r",
									"\r",
									"pm.execution.setNextRequest(\"dietician login\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_tok}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{contactNumber}}\",\r\n  \"DateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{userLoginEmail}}\",\r\n  \"Firstname\": \"{{firstName}}\",\r\n  \"HospitalCity\": \"{{hospitalCity}}\",\r\n  \"HospitalName\": \"{{hospitalName}}\",\r\n  \"HospitalPincode\": \"{{hospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{hospitalStreet}}\",\r\n  \"Lastname\": \"{{lastName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/dietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "create dietician 2",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_tok}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{contactNumber}}\",\r\n  \"DateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{userLoginEmail}}\",\r\n  \"Firstname\": \"{{firstName}}\",\r\n  \"HospitalCity\": \"{{hospitalCity}}\",\r\n  \"HospitalName\": \"{{hospitalName}}\",\r\n  \"HospitalPincode\": \"{{hospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{hospitalStreet}}\",\r\n  \"Lastname\": \"{{lastName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/dietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "dietician token",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Truth79\",\r\n  \"userLoginEmail\": \"goodwill@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "update dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.execution.setNextRequest(\"patient login\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtMTFAZ21haWwuY29tIiwiaWF0IjoxNzIyNjEzNTUxLCJleHAiOjE3MjI2NDIzNTF9.6yzx1ou5tGjpYGyx8N1rx1O7lPxB5BcOPwBVTzr9XxQ8ynauM83FHKNtVUXrZLkb4VCCqa0ybtl7WE3AfvIa5Q",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"9012345145\",\r\n  \"DateOfBirth\": \"1979-07-21\",\r\n  \"Education\": \"Engineer\",\r\n  \"Email\": \"Reshu@gmail.com\",\r\n  \"Firstname\": \"Allen\",\r\n  \"HospitalCity\": \"New York\",\r\n  \"HospitalName\": \"David\",\r\n  \"HospitalPincode\": \"765432\",\r\n  \"HospitalStreet\": \"567,Daisy lane\",\r\n  \"Lastname\": \"John\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/dietician/708",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								"708"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Morbidity",
			"item": []
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "create patient",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJnb29kd2lsbEBnbWFpbC5jb20iLCJpYXQiOjE3MjI2ODE4MjUsImV4cCI6MTcyMjcxMDYyNX0.2gyvHOHCTFMfJ0QfOR4eiLoene3mHZCCmHoMOvZ9y2IXt1x21LgXd7SQwOjWeMP5WDH_O9npMfPat_Un_PjI-g",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "sample file",
									"type": "file",
									"src": "/C:/Users/zaree/Downloads/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"Jack\",\n\"LastName\": \"Watt\",\n\"ContactNumber\": \"6789504353\",\n\"Email\": \"hana@gmail.com\",\n\"Allergy\": \"milk\",\n\"FoodPreference\": \"VEGAN\",\n\"CuisineCategory\":\"indian\",\n\"DateOfBirth\": \"1980-04-14\"\n}",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "create patient 2",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJnb29kd2lsbEBnbWFpbC5jb20iLCJpYXQiOjE3MjI3MDYxNDEsImV4cCI6MTcyMjczNDk0MX0.5aljfg0hAqHDNKR76ZFYykXT_kUNMywDz1AnyuSYC-ibuqCKMYP-iFipRat2fAJnQ2jCdjmlDrebE5mdGGpfRw",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "sample file",
									"type": "file",
									"src": "/C:/Users/zaree/Downloads/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"Jack\",\n\"LastName\": \"Watt\",\n\"ContactNumber\": \"6789504351\",\n\"Email\": \"mary@gmail.com\",\n\"Allergy\": \"milk\",\n\"FoodPreference\": \"VEGAN\",\n\"CuisineCategory\":\"indian\",\n\"DateOfBirth\": \"1980-04-14\"\n}",
									"type": "text"
								},
								{
									"key": "",
									"value": "",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "update  patient",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "sample report",
									"type": "file",
									"src": "/C:/Users/zaree/Downloads/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"Jack\",\n\"LastName\": \"Watt\",\n\"ContactNumber\": \"6789504350\",\n\"Email\": \"mary@gmail.com\",\n\"Allergy\": \"milk\",\n\"FoodPreference\": \"VEGAN\",\n\"CuisineCategory\":\"indian\",\n\"DateOfBirth\": \"1980-04-14\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient/523",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"523"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve patient file by field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"        // validating content type in header\r",
									"     pm.test(\"Content-Type header is present\", () => {\r",
									"     pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/pdf\");\r",
									"        });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/viewFile/{{file_id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patient morbidity details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Checking if content type is present or not\r",
									"     pm.test(\"Content-Type header is present\", () => {\r",
									"     pm.response.to.have.header(\"Content-Type\");\r",
									"     });\r",
									"\r",
									"     //Checking if content value is same or not\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//checking value type\r",
									" const jsonData = pm.response.json();\r",
									"\r",
									" const fileId = jsonData.fileId;\r",
									" pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(fileId[1]).to.be.a(\"integer\");\r",
									"  console.log(\"FileID Datatype\", +fileId[1]);\r",
									"  //pm.expect(jsonData.fileName).to.be.a(\"string\");\r",
									"  //pm.expect(jsonData.uploadDate).to.be.a(\"float\");\r",
									"  //pm.expect(jsonData.morbidConditions).to.be.an(\"array\");\r",
									" // pm.expect(jsonData.vitals).to.be.an(\"array\");\r",
									"  //pm.expect(jsonData.morbidConditionStr).to.be.a(\"string\");\r",
									"});\r",
									"  \r",
									"//Schema validation - pass\r",
									"var schema={  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"fileId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"fileName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"uploadDate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidConditions\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"HbA1c\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"Average Glucose\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"HbA1c\",\r",
									"            \"Average Glucose\"\r",
									"          ]\r",
									"        },\r",
									"        \"vitals\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        },\r",
									"        \"morbidConditionStr\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"fileId\",\r",
									"        \"fileName\",\r",
									"        \"uploadDate\",\r",
									"        \"morbidConditions\",\r",
									"        \"vitals\",\r",
									"        \"morbidConditionStr\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"fileId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"fileName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"uploadDate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidConditions\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T3\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T3\",\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        },\r",
									"        \"vitals\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        },\r",
									"        \"morbidConditionStr\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"fileId\",\r",
									"        \"fileName\",\r",
									"        \"uploadDate\",\r",
									"        \"morbidConditions\",\r",
									"        \"vitals\",\r",
									"        \"morbidConditionStr\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid',function(){\r",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
									"});\r",
									"\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/207\n\n",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"207\n\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "all patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//status code validation\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//schema validation\r",
									"\r",
									" const jsonData = pm.response.json();\r",
									"\r",
									"var schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"FirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ContactNumber\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Allergy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FoodPreference\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CuisineCategory\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FileMorbidity\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66ac27c23e6c022b073da303\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T3\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T3\",\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        },\r",
									"        \"66af91eba2b35b78f82f79a0\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"HbA1c\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"Average Glucose\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"HbA1c\",\r",
									"            \"Average Glucose\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66ac27c23e6c022b073da303\",\r",
									"        \"66af91eba2b35b78f82f79a0\"\r",
									"      ]\r",
									"    },\r",
									"    \"FileMorbidityCondition\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66ac27c23e6c022b073da303\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"66af91eba2b35b78f82f79a0\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66ac27c23e6c022b073da303\",\r",
									"        \"66af91eba2b35b78f82f79a0\"\r",
									"      ]\r",
									"    },\r",
									"    \"DateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"DieticianId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Vitals\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"66ac27c23e6c022b073da303\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        },\r",
									"        \"66af91eba2b35b78f82f79a0\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"66ac27c23e6c022b073da303\",\r",
									"        \"66af91eba2b35b78f82f79a0\"\r",
									"      ]\r",
									"    },\r",
									"    \"LastVisitDate\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"patientId\",\r",
									"    \"FirstName\",\r",
									"    \"LastName\",\r",
									"    \"ContactNumber\",\r",
									"    \"Email\",\r",
									"    \"Allergy\",\r",
									"    \"FoodPreference\",\r",
									"    \"CuisineCategory\",\r",
									"    \"FileMorbidity\",\r",
									"    \"FileMorbidityCondition\",\r",
									"    \"DateOfBirth\",\r",
									"    \"DieticianId\",\r",
									"    \"Vitals\",\r",
									"    \"LastVisitDate\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid',function(){\r",
									"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
									"});\r",
									"//validating datatype\r",
									" \r",
									"pm.test(\"ID should be a number\", function () {\r",
									"    pm.expect(jsonData.patientId).to.be.a('number');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete by patient Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/523",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"523"
							]
						}
					},
					"response": []
				},
				{
					"name": "update patient with new reports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{diet_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Users/zaree/Downloads/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "patient_info",
									"value": "{ \"FirstName\": \"Jack\",\n\"LastName\": \"watt\",\n\"ContactNumber\": \"5789504351\",\n\"Email\": \"egg@gmail.com\",\n\"Allergy\": \"egg\",\n\"FoodPreference\": \"VEGAN\",\n\"CuisineCategory\":\"indian\",\n\"DateOfBirth\": \"1980-04-14\"\n}",
									"type": "text"
								},
								{
									"key": "vitals",
									"value": "{ \"Weight\": 100.9,\n\"Height\": 40.0,\n\"Temperature\": 98.0,\n\"SP\": 8,\n\"DP\": 8\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient/newReports/207",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"newReports",
								"207"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-all patients with inalid url and  endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dieticia/patien\n",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dieticia",
								"patien\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-all patients with no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(401); \r",
									"});\r",
									"//validating json schema\r",
									"const schema={\r",
									"    \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"        pm.test('Validate JsonSchema Response', function() {\r",
									"        pm.response.to.have.status(401);\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-retrieve patient file by field with no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(401); \r",
									"});\r",
									"//validating json schema\r",
									"const schema={\r",
									"    \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"        pm.test('Validate JsonSchema Response', function() {\r",
									"        pm.response.to.have.status(401);\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/viewFile/{{file_id}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								"{{file_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-retrieve patient file by field with invalid url and invalid file id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(404); // Or any other status code you expect for errors\r",
									"});\r",
									"pm.test(\"Title contains 'HTTP Status 404 – Not Found'\", function () {\r",
									"    var responseBody = pm.response.text(); // Get the response body as text\r",
									"    var titleTag = responseBody.match(/<title>(.*?)<\\/title>/); // Extract title tag content\r",
									"    \r",
									"    if (titleTag) {\r",
									"        pm.expect(titleTag[1]).to.include(\"HTTP Status 404 – Not Found\");\r",
									"    } else {\r",
									"        pm.expect.fail(\"Title tag not found in response body\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dieticia/66ac27c23e6c022b073da30\n",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dieticia",
								"66ac27c23e6c022b073da30\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "N- patient morbidity details wiith no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(401); // Or any other status code you expect for errors\r",
									"});\r",
									"//validating json schema\r",
									"const schema={\r",
									"    \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"        pm.test('Validate JsonSchema Response', function() {\r",
									"        pm.response.to.have.status(401);\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/207\n",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"207\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-patient morbidity details with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"\r",
									"    \r",
									" \r",
									"//validating the content of error message\r",
									"pm.test(\"Response should contain correct errorCode and errorMessage\", function () {\r",
									"    var jsonData = pm.response.json(); \r",
									"    pm.expect(jsonData).to.have.property(\"errorCode\", \"NOT_FOUND\");\r",
									"    pm.expect(jsonData).to.have.property(\"errorMessage\", \"Patient not found with patientId : 2345\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/2345\n",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"2345\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-delete patient with no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(401); // Or any other status code you expect for errors\r",
									"});\r",
									"//validating json schema\r",
									"const schema={\r",
									"    \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"        pm.test('Validate JsonSchema Response', function() {\r",
									"        pm.response.to.have.status(401);\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/207\n",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"207\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-deleting patient with non existing id in get request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(404); // Or any other status code you expect for errors\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/2345\n",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"2345\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-delete patient with non existing Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(404); // Or any other status code you expect for errors\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/2345\n",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"2345\n"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-retrieve patient with valid url and valid parameters and missing file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(400); // Or any other status code you expect for errors\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/viewFile",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-deleting patient with invalid url and invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(404); // Or any other status code you expect for errors\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://dietician-july-api-hackathon-80f2590665cc.herokuapp.com/dieticia/patient/3456\n",
							"protocol": "https",
							"host": [
								"dietician-july-api-hackathon-80f2590665cc",
								"herokuapp",
								"com"
							],
							"path": [
								"dieticia",
								"patient",
								"3456\n"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//To get response body -> \"token\" value\r",
									"bodyData = pm.response.json();\r",
									"\r",
									"console.log(\"Response \" + bodyData);\r",
									"token_value = bodyData.token;\r",
									"\r",
									"//To check in the console\r",
									"console.log(\"Admin Generated Token: \" + token_value);\r",
									"\r",
									"//Setting token as global variable to use in collections\r",
									"pm.collectionVariables.set(\"adminToken\", token_value);\r",
									"\r",
									"//data validation\r",
									"pm.test('Verified user signed in ', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.token).to.eql(pm.collectionVariables.get('adminToken'));\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Schema validation\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\",\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.test(\"Response contains valid JSON data\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"loginEndPoint\", \"login\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{userEmail}}\"\r\n}\r\n\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-admin login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{passwordN}}\",\r\n  \"userLoginEmail\": \"{{userEmailN}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "dietician login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Dietician Token generation\");\r",
									"\r",
									"//Assigning Dietician Token to Collection Variables\r",
									"\r",
									"bodyData = pm.response.json();\r",
									"console.log(bodyData);\r",
									"pm.collectionVariables.set(\"dieticianToken\",bodyData.token);\r",
									"\r",
									"pm.execution.setNextRequest(\"update dietician\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"password\": \"{{dieticianPassword}}\",\r\n        \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "patient login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"patientToken\", bodyData.token);\r",
									"pm.collectionVariables.set(\"patientLoginEmail\", bodyData.loginUserEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "adminToken",
			"value": ""
		},
		{
			"key": "loginEndPoint",
			"value": ""
		},
		{
			"key": "negative_Login",
			"value": ""
		},
		{
			"key": "dieticianToken",
			"value": ""
		},
		{
			"key": "patientPassword",
			"value": ""
		},
		{
			"key": "patientLoginEmail",
			"value": ""
		},
		{
			"key": "dieticianPassword",
			"value": "",
			"type": "string"
		},
		{
			"key": "dieticianLoginEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "password",
			"value": "",
			"type": "string"
		},
		{
			"key": "userLoginEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "fileId",
			"value": "",
			"type": "string"
		},
		{
			"key": "patientId",
			"value": "",
			"type": "string"
		}
	]
}