{
	"info": {
		"_postman_id": "873a90bc-6c3c-43ea-b0db-652028bb5754",
		"name": "Team11_APIExplorers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33413576",
		"_collection_link": "https://team11apiexplorersjul24.postman.co/workspace/Team11_APIExplorers_Jul24~d0334863-9256-4f5f-8771-7628c87e74b7/collection/33413576-873a90bc-6c3c-43ea-b0db-652028bb5754?action=share&source=collection_link&creator=33413576"
	},
	"item": [
		{
			"name": "Hooks",
			"item": [
				{
					"name": "admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Admin Token generation\");\r",
									"\r",
									"   //To get response body -> \"token\" value\r",
									"bodyData = pm.response.json();\r",
									"\r",
									"\r",
									"console.log(\"Response \" + bodyData);\r",
									"token_value = bodyData.token;\r",
									"\r",
									"//To check in the console\r",
									"console.log(\"Admin Generated Token: \" + token_value);\r",
									"\r",
									"//Setting token as global variable to use in collections\r",
									"pm.collectionVariables.set(\"adminToken\", token_value);\r",
									"\r",
									"//data validation\r",
									"pm.test('Verified user signed in ', () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.token).to.eql(pm.collectionVariables.get('adminToken'));\r",
									"});\r",
									"    // Validating the Status\r",
									"    pm.test(\"Validate Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        });\r",
									"\r",
									"    // Validating the Response values\r",
									"    pm.test(\"Assertion Validation for Response\", function () {\r",
									"        const response=pm.response.json();\r",
									"        const roles = response.roles;\r",
									"        \r",
									"    // Log the retrieved role for debugging\r",
									"        console.log(\"Retrieved Role:\", roles[0]);\r",
									"\r",
									"     \r",
									"        \r",
									"         });\r",
									"        \r",
									"        // Response header\r",
									"     pm.test(\"Content-Type header is present\", () => {\r",
									"     pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"        });\r",
									"\r",
									"        \r",
									"        const schema={\r",
									"      \"type\": \"object\",\r",
									"     \"properties\": {\r",
									"      \"token\": {\r",
									"      \"type\": \"string\"\r",
									"     },\r",
									"      \"type\": {\r",
									"      \"type\": \"string\"\r",
									"        },\r",
									"     \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"     },\r",
									"     \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"     },\r",
									"      \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"         }\r",
									"       ]\r",
									"      }\r",
									"        },\r",
									"         \"required\": [\r",
									"       \"token\",\r",
									"      \"type\",\r",
									"      \"userId\",\r",
									"      \"loginUserEmail\",\r",
									"      \"roles\"\r",
									"         ]\r",
									"      }\r",
									"        pm.test('Validate JsonSchema Response', function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    \r",
									"//pm.execution.setNextRequest(\"N - admin login with invalid endpoint\");\r",
									"\r",
									"pm.execution.setNextRequest(\"create dietician\");\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Create Dietician\");\r",
									"// Assigning userloginEmail and password to collection Variables\r",
									"\r",
									"bodyData = pm.response.json();\r",
									"console.log(\"Response\" + bodyData);\r",
									"\r",
									"//Creating Dietician Object\r",
									"let dietician = new Object();\r",
									"dietician.dieticianLoginEmail = bodyData.Email;\r",
									"dietician.dieticianPassword = bodyData.loginPassword;\r",
									"dietician.dieticianId = bodyData.id;\r",
									"//console.log(dietician);\r",
									"\r",
									"//Verifying dieticain array in collection variable\r",
									"let dieticians = pm.collectionVariables.get(\"dieticians\");\r",
									"\r",
									"//Adding dietician\r",
									"if(dieticians) {\r",
									" dieticians[dieticians.length]  = dietician;\r",
									"  pm.collectionVariables.set(\"dieticians\", dieticians);\r",
									"}\r",
									"else{\r",
									"    let tempDieticians = [dietician];\r",
									"    console.log(\"tempDietician \" + tempDieticians);\r",
									"    console.log(tempDieticians);\r",
									"    pm.collectionVariables.set(\"dieticians\", tempDieticians);\r",
									"}\r",
									"\r",
									"//console.log(pm.collectionVariables.get(\"dieticians\"));\r",
									"\r",
									"// Assigning DieticianId1 and DieticiantId2 to collection variables\r",
									"let dieticianId1 = pm.collectionVariables.get(\"dieticianId1\");\r",
									"\r",
									"if (!dieticianId1){\r",
									"    pm.collectionVariables.set(\"dieticianId1\", bodyData.id);   \r",
									"    console.log(\"dieticainId1\" +pm.collectionVariables.get(\"dieticianId1\") ) \r",
									"    \r",
									"}else {\r",
									"        pm.collectionVariables.set(\"dieticianId2\" , bodyData.id); \r",
									"        console.log(\"dieticianId2\" +pm.collectionVariables.get(\"dieticianId2\") )   \r",
									"}\r",
									"\r",
									"pm.test(\"status code is 201 created\",function(){\r",
									"           pm.response.to.have.status(201);\r",
									" });\r",
									"\r",
									"pm.execution.setNextRequest(\"dietician login\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Variable generation\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"contactNumber = pm.variables.get(\"contactNumber\");\r",
									"dateOfBirth = pm.variables.get(\"dateOfBirth\");\r",
									"email = pm.variables.get(\"email\");\r",
									"\r",
									"if(contactNumber === \"$RAN\"){\r",
									"\r",
									"pm.variables.set(\"contactNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}').replaceAll(\"-\",\"\"));\r",
									"}\r",
									"\r",
									"if(dateOfBirth === \"$RAN\"){\r",
									"pm.variables.set(\"dateOfBirth\", pm.variables.replaceIn('{{$isoTimestamp}}'));\r",
									"\r",
									"}\r",
									"\r",
									"if(email === \"$RAN\"){\r",
									"pm.variables.set(\"email\" , pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{contactNumber}}\",\r\n  \"DateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\": \"{{hospitalCity}}\",\r\n  \"HospitalName\": \"{{hospitalName}}\",\r\n  \"HospitalPincode\": \"{{hospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{hospitalStreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/dietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "dietician login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Dietician Token generation\");\r",
									"\r",
									"//Assigning Dietician Token to Collection Variables\r",
									"\r",
									"bodyData = pm.response.json();\r",
									"console.log(bodyData);\r",
									"let dieticianIndex = pm.collectionVariables.get(\"dieticianIndex\");\r",
									"if(!pm.collectionVariables.get(\"dieticianToken\")){\r",
									"    pm.collectionVariables.set(\"dieticianToken\",bodyData.token);\r",
									"}else{\r",
									"     pm.collectionVariables.set(\"dieticianToken1\",bodyData.token);\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"// Validating the Status\r",
									"pm.test(\"Validate Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validating the Response values\r",
									"pm.test(\"Assertion Validation for Response\", function () {\r",
									"         const response=pm.response.json();\r",
									"          const roles = response.roles;\r",
									"         console.log(\"Retrieved Role:\", roles[0]);\r",
									"        \r",
									"\r",
									"         \r",
									"          });\r",
									"\r",
									"          // Response header\r",
									"     pm.test(\"Content-Type header is present\", () => {\r",
									"     pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"        });\r",
									"\r",
									"        \r",
									"        const schema={\r",
									"   \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"pm.test('Validate JsonSchema Response', function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"create new patient\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"In dietician login\");\r",
									"\r",
									"//Retrieving dietician array from collection\r",
									"\r",
									"let dieticianArray = pm.collectionVariables.get(\"dieticians\");\r",
									"console.log(\"dieticianArray \" + dieticianArray);\r",
									"\r",
									"\r",
									"if(dieticianArray.length>0) {\r",
									"   dietician = dieticianArray.shift();\r",
									"   console.log(dietician);\r",
									"    pm.variables.set(\"dieticianLoginEmail\", dietician.dieticianLoginEmail);\r",
									"    pm.variables.set(\"dieticianPassword\", dietician.dieticianPassword);\r",
									"    pm.variables.set(\"dieticianId\", dietician.dieticianId);\r",
									"\r",
									"}\r",
									"\r",
									"if (dieticianArray.length>1) {\r",
									"  //  pm.collectionVariables.set(\"diaticians\",dieticainArray);\r",
									"    pm.execution.setNextRequest(\"dietician login\");\r",
									"}else{\r",
									"\r",
									"//pm.execution.setNextRequest(\"update dieticain\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"password\": \"{{dieticianPassword}}\",\r\n\"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "create new patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"In Patient Prescript\");\r",
									"console.log(pm.variables.get(\"patientInfo\"));\r",
									"\r",
									"let moment = require('moment');\r",
									"\r",
									"let patientInfo = pm.variables.get(\"patientInfo\");\r",
									"if(patientInfo.ContactNumber === \"$RAN\"){\r",
									"let contactNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}').replaceAll(\"-\",\"\");\r",
									"patientInfo.ContactNumber=contactNumber;\r",
									"}\r",
									"if(patientInfo.Email === \"$RAN\"){\r",
									"let Email = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"patientInfo.Email=Email;\r",
									"}\r",
									"if(patientInfo.DateOfBirth === \"$RAN\"){\r",
									"let DateOfBirth = moment(pm.variables.replaceIn('{{$isoTimestamp}}')).format(\"YYYY-MM-DD\");\r",
									"patientInfo.DateOfBirth= DateOfBirth;\r",
									"}\r",
									"\r",
									"let str = JSON.stringify(patientInfo);\r",
									"pm.variables.set(\"patientInfo\",str);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"// Assigning userloginEmail to collection Variables\r",
									"bodyData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"patientLoginEmail\", bodyData.Email);\r",
									"pm.collectionVariables.set(\"patientContactNumber\",bodyData.ContactNumber);\r",
									"pm.collectionVariables.set(\"patientDOB\",bodyData.DateOfBirth);\r",
									"\r",
									"console.log(\"patientLoginEmail: \" + pm.collectionVariables.get(\"patientLoginEmail\"));\r",
									"\r",
									"// Assigning PatientId1 and PatientId2 to collection variables\r",
									"patientId1 = pm.collectionVariables.get(\"patientId1\");\r",
									"\r",
									"if (!patientId1){\r",
									"    pm.collectionVariables.set(\"patientId1\", bodyData.patientId);    \r",
									"    \r",
									"}else {\r",
									"        pm.collectionVariables.set(\"patientId2\" , bodyData.patientId);   \r",
									"}\r",
									"\r",
									"//Validation for status code\r",
									"let statusCode = pm.variables.get(\"statusCode\");\r",
									"pm.test(\"Status code is  \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									"\r",
									"//Retrieving fileId from Json body\r",
									"let fileId = \"\";\r",
									"let fileMorbidity = bodyData[\"FileMorbidity\"];\r",
									"Object.entries(fileMorbidity).forEach(([key, value]) => {\r",
									"    fileId = key;\r",
									"});\r",
									"\r",
									"//Schema Validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"FirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ContactNumber\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Allergy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FoodPreference\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CuisineCategory\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FileMorbidity\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        fileId: {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T3\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T3\",\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        fileId\r",
									"      ]\r",
									"    },\r",
									"    \"FileMorbidityCondition\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        fileId: {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"         fileId\r",
									"      ]\r",
									"    },\r",
									"    \"DateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"DieticianId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Vitals\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        fileId: {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        fileId\r",
									"      ]\r",
									"    },\r",
									"    \"LastVisitDate\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"patientId\",\r",
									"    \"FirstName\",\r",
									"    \"LastName\",\r",
									"    \"ContactNumber\",\r",
									"    \"Email\",\r",
									"    \"Allergy\",\r",
									"    \"FoodPreference\",\r",
									"    \"CuisineCategory\",\r",
									"    \"FileMorbidity\",\r",
									"    \"FileMorbidityCondition\",\r",
									"    \"DateOfBirth\",\r",
									"    \"DieticianId\",\r",
									"    \"Vitals\",\r",
									"    \"LastVisitDate\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valid JSON data\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.execution.setNextRequest(\"patient login\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\"FirstName\": \"Adamw\",\"LastName\": \"alllen\",\"ContactNumber\": \"9970004400\",\"Email\": \"adam1@gmail.com\",\"Allergy\": \"pecan\",\"FoodPreference\": \"VEGAN\",\"CuisineCategory\": \"indian\",\"DateOfBirth\": \"1979-10-14\"}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"description": "sample pdf file",
									"type": "file",
									"src": "0ncOJSZ2Y/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "patient login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Patient Token generation\");\r",
									"\r",
									"//Assigning Dietician Token to Collection Variables\r",
									"\r",
									" jsondata=pm.response.json();\r",
									"patientToken_value = jsondata.token;\r",
									"\r",
									"     //To check in the console\r",
									"\r",
									"        console.log(\"Patient Generated Token: \" + patientToken_value);\r",
									"\r",
									"     //Setting token as Collection variable to use in collections\r",
									"\r",
									"        pm.collectionVariables.set(\"patientToken\", patientToken_value);\r",
									"\r",
									"//Validating token\r",
									"\r",
									"        pm.test(\"Validating Patient Token\", function () {\r",
									"       const response = pm.response.json();\r",
									"     pm.expect(response.token).to.eql(pm.collectionVariables.get('patientToken'));\r",
									"\r",
									"        });\r",
									"\r",
									"// Validating the Status\r",
									"\r",
									"        pm.test(\"Validate Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        });\r",
									"\r",
									"// Validating the Response values\r",
									"\r",
									"         pm.test(\"Assertion Validation for Response\", function () {\r",
									"         const response=pm.response.json();\r",
									"          const roles = response.roles;\r",
									"         console.log(\"Retrieved Role:\", roles[0]);\r",
									"           \r",
									"          });\r",
									"\r",
									"// Response header\r",
									"     pm.test(\"Content-Type header is present\", () => {\r",
									"     pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"        });\r",
									"\r",
									"        \r",
									"const schema={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Validate JsonSchema Response', function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"\r",
									"pm.execution.setNextRequest(\"N - admin login with invalid endpoint\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" pre script\");\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"patientPassword\",\"test\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Admin Login",
					"item": [
						{
							"name": "N - admin login with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response Error\", function () {\r",
											" const response=pm.response.json();\r",
											"        \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with invalid base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 404\", function () {\r",
											"pm.response.to.have.status(404);\r",
											" });\r",
											"\r",
											"// Get the response body as a string\r",
											"const responseBody1 = pm.response.text()\r",
											"\r",
											"// Load the response body into cheerio\r",
											"const $ = cheerio.load(responseBody1);\r",
											"\r",
											"// Extract the content of the <h1> tag\r",
											"const h1Content = $('h1').text();\r",
											"\r",
											"// Log the content of the <h1> tag to the console\r",
											"console.log(h1Content);\r",
											"\r",
											"// Set the extracted <h1> content as an environment variable\r",
											"pm.environment.set('h1Content', h1Content);\r",
											"\r",
											"// Optionally, you can assert the content if you expect a specific value\r",
											"pm.test('Validating error code', function() {\r",
											"pm.expect(h1Content).to.eql('HTTP Status 404 – Not Found');\r",
											"\r",
											" });\r",
											"\r",
											"\r",
											"\r",
											"   \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalidBaseUrl}}/login",
									"host": [
										"{{invalidBaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with invalid emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											"\r",
											"        \r",
											"     \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{invalidAdminPassword}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with blank password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with blank emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											"\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });\r",
											"\r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with invalid method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 405\", function () {\r",
											"pm.response.to.have.status(405);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Method Not Allowed\");\r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with both emailId and password invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											" \r",
											"\r",
											"\r",
											"       \r",
											"    \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{invalidAdminPassword}}\",\r\n  \"userLoginEmail\": \"{{invalidAdminEmailId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with both emailId and password blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dietician Login",
					"item": [
						{
							"name": "N - dietician login with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response Error\", function () {\r",
											" const response=pm.response.json();\r",
											"        \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });\r",
											"\r",
											"        \r",
											"   "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with invalid base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 404\", function () {\r",
											"pm.response.to.have.status(404);\r",
											" });\r",
											"\r",
											"// Get the response body as a string\r",
											"const responseBody1 = pm.response.text()\r",
											"\r",
											"// Load the response body into cheerio\r",
											"const $ = cheerio.load(responseBody1);\r",
											"\r",
											"// Extract the content of the <h1> tag\r",
											"const h1Content = $('h1').text();\r",
											"\r",
											"// Log the content of the <h1> tag to the console\r",
											"console.log(h1Content);\r",
											"\r",
											"// Set the extracted <h1> content as an environment variable\r",
											"pm.environment.set('h1Content', h1Content);\r",
											"\r",
											"// Optionally, you can assert the content if you expect a specific value\r",
											"pm.test('Check <h1> content', function() {\r",
											"pm.expect(h1Content).to.eql('HTTP Status 404 – Not Found');\r",
											"\r",
											" });\r",
											"\r",
											"\r",
											"\r",
											"   \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalidBaseUrl}}/login",
									"host": [
										"{{invalidBaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with invalid emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with blank emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											"\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with invalid method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 405\", function () {\r",
											"pm.response.to.have.status(405);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Method Not Allowed\");\r",
											" });\r",
											"\r",
											"    "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with both emailId and password invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											" \r",
											"\r",
											"\r",
											"       \r",
											"    \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{invalidAdminPassword}}\",\r\n  \"userLoginEmail\": \"{{invalidAdminEmailId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with both emailId and password blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" });\r",
											"\r",
											"  "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with blank password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient Login",
					"item": [
						{
							"name": "N - patient login with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response Error\", function () {\r",
											" const response=pm.response.json();\r",
											"        \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with invalid base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 404\", function () {\r",
											"pm.response.to.have.status(404);\r",
											" });\r",
											"\r",
											"// Get the response body as a string\r",
											"const responseBody1 = pm.response.text()\r",
											"\r",
											"// Load the response body into cheerio\r",
											"const $ = cheerio.load(responseBody1);\r",
											"\r",
											"// Extract the content of the <h1> tag\r",
											"const h1Content = $('h1').text();\r",
											"\r",
											"// Log the content of the <h1> tag to the console\r",
											"console.log(h1Content);\r",
											"\r",
											"// Set the extracted <h1> content as an environment variable\r",
											"pm.environment.set('h1Content', h1Content);\r",
											"\r",
											"// Optionally, you can assert the content if you expect a specific value\r",
											"pm.test('Check <h1> content', function() {\r",
											"pm.expect(h1Content).to.eql('HTTP Status 404 – Not Found');\r",
											"\r",
											" });\r",
											"\r",
											"\r",
											"\r",
											"   \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalidBaseUrl}}/login",
									"host": [
										"{{invalidBaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with invalid emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with blank password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											"\r",
											"  "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with blank emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											"\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with invalid method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 405\", function () {\r",
											"pm.response.to.have.status(405);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Method Not Allowed\");\r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with both emailId and password invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											" \r",
											"\r",
											"\r",
											"       \r",
											"    \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{invalidAdminPassword}}\",\r\n  \"userLoginEmail\": \"{{invalidAdminEmailId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with both emailId and password blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Dietician",
			"item": [
				{
					"name": "N-Invalid create dietician",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Variable generation\r",
									"\r",
									"var moment = require('moment');\r",
									"\r",
									"contactNumber = pm.variables.get(\"contactNumber\");\r",
									"dateOfBirth = pm.variables.get(\"dateOfBirth\");\r",
									"email = pm.variables.get(\"email\");\r",
									"\r",
									"if(contactNumber === \"$RAN\"){\r",
									"\r",
									"pm.variables.set(\"contactNumber\", pm.variables.replaceIn('{{$randomPhoneNumber}}').replaceAll(\"-\",\"\"));\r",
									"}\r",
									"\r",
									"if(dateOfBirth === \"$RAN\"){\r",
									"pm.variables.set(\"dateOfBirth\", pm.variables.replaceIn('{{$isoTimestamp}}'));\r",
									"\r",
									"}\r",
									"\r",
									"if(email === \"$RAN\"){\r",
									"pm.variables.set(\"email\" , pm.variables.replaceIn('{{$randomEmail}}'));\r",
									"\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code 400 Bad Request\",function(){\r",
									"pm.response.to.have.status(400);\r",
									"     });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"{{contactNumber}}\",\r\n  \"DateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\": \"{{hospitalCity}}\",\r\n  \"HospitalName\": \"{{hospitalName}}\",\r\n  \"HospitalPincode\": \"{{hospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{hospitalStreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/dietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-create dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 bad request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{   \"id\"    : \"{{dieticianid1}}\",\r\n  \"ContactNumber\": \"{{contactNumber}}\",\r\n  \"DateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\": \"{{hospitalCity}}\",\r\n  \"HospitalName\": \"{{hospitalName}}\",\r\n  \"HospitalPincode\": \"{{hospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{hospitalStreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/dietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "In update Dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"status code 405 Method Not allowed\",function(){\r",
									"// pm.response.to.have.status(400);\r",
									"//     });\r",
									"\r",
									"pm.test(\"Status code is either 200 or 400\", function () {\r",
									"    var statusCode = pm.response.code;\r",
									"    pm.expect(statusCode).to.be.oneOf([200, 400,405]);\r",
									"\r",
									"    if (statusCode === 200) {\r",
									"        console.log(\"The request was successful with status code 200.\");\r",
									"    } else if (statusCode === 400) {\r",
									"        console.log(\"The request failed with status code 400.\");\r",
									"    }\r",
									"    else if (statusCode === 405) \r",
									"        console.log(\"The request method is not allowed with status code 405.\");\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \"dieticianid\":\"{{dieticianid1}}\",\r\n  \"ContactNumber\": \"{{contactNumber}}\",\r\n  \"DateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\": \"{{hospitalCity}}\",\r\n  \"HospitalName\": \"{{hospitalName}}\",\r\n  \"HospitalPincode\": \"{{hospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{hospitalStreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/dietician/{{dieticianId1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								"{{dieticianId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  pm.test(\"Status code is either 200 or 400\", function () {\r",
									"//     var statusCode = pm.response.code;\r",
									"//     pm.expect(statusCode).to.be.oneOf([200, 400,405]);\r",
									"\r",
									"//     if (statusCode === 200) {\r",
									"//         console.log(\"The request was successful with status code 200.\");\r",
									"//     } else if (statusCode === 400) {\r",
									"//         console.log(\"The request failed with status code 400.\");\r",
									"//     }\r",
									"//     else if (statusCode === 405) \r",
									"//         console.log(\"The request method is not allowed with status code 405.\");\r",
									"// });\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"ContactNumber\": \"{{contactNumber}}\",\r\n  \"DateOfBirth\": \"{{dateOfBirth}}\",\r\n  \"Education\": \"{{education}}\",\r\n  \"Email\": \"{{email}}\",\r\n  \"Firstname\": \"{{firstname}}\",\r\n  \"HospitalCity\": \"{{hospitalCity}}\",\r\n  \"HospitalName\": \"{{hospitalName}}\",\r\n  \"HospitalPincode\": \"{{hospitalPincode}}\",\r\n  \"HospitalStreet\": \"{{hospitalStreet}}\",\r\n  \"Lastname\": \"{{lastname}}\"\r\n \r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/dietician/{{dieticianId1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								"{{dieticianId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "P-all dietician details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responsejson=pm.response.json();\r",
									"console.log(responsejson);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/dietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-404  with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// const responsejson = pm.response.json();\r",
									"// console.log(responsejson);\r",
									"// const expectederrormessage = \"Dietician id not found\";\r",
									"\r",
									"// pm.test(\"Response contains error message\", function () {\r",
									"// pm.expect(responsejson).to.have.property('errormessage');\r",
									"// pm.expect(responsejson.errormessage).to.eql(expectederrormessage);\r",
									"// });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/dietician/7888999",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								"7888999"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve with dieticianid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// pm.test(\"Body matches string\", function () {\r",
									"//     pm.expect(pm.response.text()).to.include(\"Firstname\");\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/dietician/{{dieticianId1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								"{{dieticianId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-retrieve with invalid id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// const expectederrorcode=\"illegal arguement\";\r",
									"// const expectedmessagesubstring=\"for input string: \\\"{{dieticianIdy}}\\\"\";\r",
									"\r",
									"// const responsejson=pm.response.json();\r",
									"// pm.test(\"status code is 400 bad request\",function(){\r",
									"//            pm.response.to.have.status(400);\r",
									"//  });\r",
									" \r",
									" \r",
									"//  pm.test(\"response contains  errormessage\",function(){\r",
									"//     pm.expect(responsejson.errormessage).to.eql(expectederrormessage);\r",
									"//  })\r",
									"\r",
									"//  console.log(responsejson);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/dietician/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "N-with invalid endpoints",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/dietician/",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "N-unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 unauthorized\", function () {\r",
									"\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/dietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "update unique fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response\");\r",
									"\r",
									"//Validation for status code\r",
									"let statusCode = pm.variables.get(\"statusCode\");\r",
									"pm.test(\"Status code is  \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Prescript\");\r",
									"\r",
									"console.log(pm.variables.get(\"patientInfo\"));\r",
									"\r",
									"let moment = require('moment');\r",
									"\r",
									"let patientInfo = pm.variables.get(\"patientInfo\");\r",
									"if(patientInfo.ContactNumber === \"$RAN\"){\r",
									"let contactNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}').replaceAll(\"-\",\"\");\r",
									"patientInfo.ContactNumber=contactNumber;\r",
									"}\r",
									"if(patientInfo.Email === \"$RAN\"){\r",
									"let Email = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"patientInfo.Email=Email;\r",
									"}\r",
									"if(patientInfo.DateOfBirth === \"$RAN\"){\r",
									"let DateOfBirth = moment(pm.variables.replaceIn('{{$isoTimestamp}}')).format(\"YYYY-MM-DD\");\r",
									"patientInfo.DateOfBirth= DateOfBirth;\r",
									"}\r",
									"\r",
									"let str = JSON.stringify(patientInfo);\r",
									"pm.variables.set(\"patientInfo\",str);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Febi/NumpyNinja/Hackathon/DieticianPostmanHackathon_Jul24/Jul-Aug2024-Dietician API Hackathon/Sample reports/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"Adamw\",\n\"LastName\": \"alllen\",\n\"ContactNumber\": \"9000000000\",\n\"Email\": \"adam1@gmail.com\",\n\"Allergy\": \"pecan\",\n\"FoodPreference\": \"VEGAN\",\n\"CuisineCategory\":\"indian\",\n\"DateOfBirth\": \"1979-10-14\"\n}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-create new patient with invalid values",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" pre script\");\r",
									"console.log(\"Invalid input: \" +pm.variables.get(\"invalidIP\"));\r",
									"\r",
									"//Setting patientInfo values\r",
									"let moment = require('moment');\r",
									"let patientInfo = pm.variables.get(\"patientInfo\");\r",
									"if(patientInfo.ContactNumber === \"$RAN\"){\r",
									"let contactNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}').replaceAll(\"-\",\"\");\r",
									"patientInfo.ContactNumber=contactNumber;\r",
									"}\r",
									"if(patientInfo.Email === \"$RAN\"){\r",
									"let Email = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"patientInfo.Email=Email;\r",
									"}\r",
									"if(patientInfo.DateOfBirth === \"$RAN\"){\r",
									"let DateOfBirth = moment(pm.variables.replaceIn('{{$isoTimestamp}}')).format(\"YYYY-MM-DD\");\r",
									"patientInfo.DateOfBirth= DateOfBirth;\r",
									"}\r",
									"\r",
									"let str = JSON.stringify(patientInfo);\r",
									"pm.variables.set(\"patientInfo\",str);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post-response\");\r",
									"console.log(\"Invalid input: \" +pm.variables.get(\"invalidIP\"));\r",
									"\r",
									"const invalidIP = pm.variables.get(\"invalidIP\");\r",
									"console.log(\"Json Error: \" + pm.response.json.errorMessage);\r",
									"console.log(\"Error: \" + pm.variables.get(\"errorMsg\"));\r",
									"\r",
									"//Validation for Error message\r",
									"pm.test(`Updating unique fields fails with ${invalidIP}` , function () {\r",
									"    //pm.response.to.have.jsonBody('errorMessage', pm.variables.get(\"errorMsg\"));\r",
									"    //pm.response.to.have.jsonBody('errorCode', pm.variables.get(\"INVALID_REQ_DATA\"));\r",
									"});\r",
									"\r",
									"//Validation for status code\r",
									"let statusCode = pm.variables.get(\"statusCode\");\r",
									"pm.test(\"Status code is  \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\"FirstName\": \"Adamw\",\"LastName\": \"alllen\",\"ContactNumber\": \"9070004800\",\"Email\": \"adam1@gmail.com\",\"Allergy\": \"pecan\",\"FoodPreference\": \"VEGAN\",\"CuisineCategory\": \"indian\",\"DateOfBirth\": \"1979-10-14\"}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"description": "sample pdf file",
									"type": "file",
									"src": "/C:/Febi/NumpyNinja/Hackathon/DieticianPostmanHackathon_Jul24/Jul-Aug2024-Dietician API Hackathon/Sample reports/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "N - update unique fields with duplicate values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response\");\r",
									"\r",
									"//Response error message validation\r",
									"pm.test('Updating unique fields fails with duplicate values', function () {\r",
									"    pm.response.to.have.jsonBody('errorMessage', 'Patient already exists with given DateOfBirth and ContactNumber');\r",
									"    \r",
									"});\r",
									"\r",
									"//Validation for status code\r",
									"let statusCode = pm.variables.get(\"statusCode\");\r",
									"pm.test(\"Status code is  \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"In \"  + pm.info.requestName + \" pre script\");\r",
									"\r",
									"//Setting duplicate contact number and DOB\r",
									"\r",
									"let patientInfo = pm.variables.get(\"patientInfo\");\r",
									"if(patientInfo.ContactNumber === \"$DUP\"){\r",
									"let contactNumber = pm.collectionVariables.get(\"patientContactNumber\");\r",
									"patientInfo.ContactNumber=contactNumber;\r",
									"}\r",
									"\r",
									"if(patientInfo.Email === \"$DUP\"){\r",
									"let Email = pm.collectionVariables.get(\"patientLoginEmail\");\r",
									"patientInfo.Email=Email;\r",
									"}\r",
									"\r",
									"if(patientInfo.DateOfBirth === \"$DUP\"){\r",
									"let DateOfBirth = pm.collectionVariables.get(\"patientDOB\");\r",
									"patientInfo.DateOfBirth= DateOfBirth;\r",
									"}\r",
									"let str = JSON.stringify(patientInfo);\r",
									"pm.variables.set(\"patientInfo\",str);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/C:/Febi/NumpyNinja/Hackathon/DieticianPostmanHackathon_Jul24/Jul-Aug2024-Dietician API Hackathon/Sample reports/HyperThyroid_Report_final.pdf",
									"disabled": true
								},
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"Adamw\",\n\"LastName\": \"alllen\",\n\"ContactNumber\": \"9000000000\",\n\"Email\": \"adam1@gmail.com\",\n\"Allergy\": \"pecan\",\n\"FoodPreference\": \"VEGAN\",\n\"CuisineCategory\":\"indian\",\n\"DateOfBirth\": \"1979-10-14\"\n}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-create new patient with invalid endpoint",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"In Patient Prescript\");\r",
									"console.log(pm.variables.get(\"patientInfo\"));\r",
									"\r",
									"let moment = require('moment');\r",
									"\r",
									"let patientInfo = pm.variables.get(\"patientInfo\");\r",
									"if(patientInfo.ContactNumber === \"$RAN\"){\r",
									"let contactNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}').replaceAll(\"-\",\"\");\r",
									"patientInfo.ContactNumber=contactNumber;\r",
									"}\r",
									"if(patientInfo.Email === \"$RAN\"){\r",
									"let Email = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"patientInfo.Email=Email;\r",
									"}\r",
									"if(patientInfo.DateOfBirth === \"$RAN\"){\r",
									"let DateOfBirth = moment(pm.variables.replaceIn('{{$isoTimestamp}}')).format(\"YYYY-MM-DD\");\r",
									"patientInfo.DateOfBirth= DateOfBirth;\r",
									"}\r",
									"\r",
									"let str = JSON.stringify(patientInfo);\r",
									"pm.variables.set(\"patientInfo\",str);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//Validation for status code\r",
									"let statusCode = pm.variables.get(\"statusCode\");\r",
									"pm.test(\"Status code is  \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									"\r",
									"\r",
									"//pm.execution.setNextRequest(\"patient login\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\"FirstName\": \"Adamw\",\"LastName\": \"alllen\",\"ContactNumber\": \"9970004400\",\"Email\": \"adam1@gmail.com\",\"Allergy\": \"pecan\",\"FoodPreference\": \"VEGAN\",\"CuisineCategory\": \"indian\",\"DateOfBirth\": \"1979-10-14\"}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "file",
									"description": "sample pdf file",
									"type": "file",
									"src": "/C:/Febi/NumpyNinja/Hackathon/DieticianPostmanHackathon_Jul24/Jul-Aug2024-Dietician API Hackathon/Sample reports/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient123",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient123"
							]
						}
					},
					"response": []
				},
				{
					"name": "update patient by patient id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"In Patient Update Prescript\");\r",
									"\r",
									"//Assigning values for patientInfo\r",
									"let moment = require('moment');\r",
									"\r",
									"let patientInfo = pm.variables.get(\"patientInfo\");\r",
									"/*\r",
									"if(patientInfo.ContactNumber === \"$RAN\"){\r",
									"let contactNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}').replaceAll(\"-\",\"\");\r",
									"patientInfo.ContactNumber=contactNumber;\r",
									"}\r",
									"\r",
									"if(patientInfo.DateOfBirth === \"$RAN\"){\r",
									"let DateOfBirth = moment(pm.variables.replaceIn('{{$isoTimestamp}}')).format(\"YYYY-MM-DD\");\r",
									"patientInfo.DateOfBirth= DateOfBirth;\r",
									"}\r",
									"\r",
									"if(patientInfo.Email === \"$RAN\"){\r",
									"let Email = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"patientInfo.Email=Email;\r",
									"}\r",
									"*/\r",
									"let str = JSON.stringify(patientInfo);\r",
									"pm.variables.set(\"patientInfo\",str);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Patient Update Post Script\");\r",
									"\r",
									"//Validation for status code\r",
									"let statusCode = pm.variables.get(\"statusCode\");\r",
									"pm.test(\"Status code is  \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									"\r",
									"bodyData = pm.response.json();\r",
									"\r",
									"//Retrieving fileId from Json body\r",
									"let fileId = \"\";\r",
									"let fileMorbidity = bodyData[\"FileMorbidity\"];\r",
									"if(!fileMorbidity){\r",
									"    return;\r",
									"}\r",
									"Object.entries(fileMorbidity).forEach(([key, value]) => {\r",
									"    fileId = key;\r",
									"});\r",
									"\r",
									"//Schema Validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"FirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ContactNumber\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Allergy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FoodPreference\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CuisineCategory\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FileMorbidity\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        fileId: {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T3\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T3\",\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        fileId\r",
									"      ]\r",
									"    },\r",
									"    \"FileMorbidityCondition\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        fileId: {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"         fileId\r",
									"      ]\r",
									"    },\r",
									"    \"DateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"DieticianId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Vitals\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        fileId: {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        fileId\r",
									"      ]\r",
									"    },\r",
									"    \"LastVisitDate\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"patientId\",\r",
									"    \"FirstName\",\r",
									"    \"LastName\",\r",
									"    \"ContactNumber\",\r",
									"    \"Email\",\r",
									"    \"Allergy\",\r",
									"    \"FoodPreference\",\r",
									"    \"CuisineCategory\",\r",
									"    \"FileMorbidity\",\r",
									"    \"FileMorbidityCondition\",\r",
									"    \"DateOfBirth\",\r",
									"    \"DieticianId\",\r",
									"    \"Vitals\",\r",
									"    \"LastVisitDate\"\r",
									"  ]\r",
									"}\r",
									"/*\r",
									"pm.test(\"Response contains valid JSON data\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"*/\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "0ncOJSZ2Y/HyperThyroid_Report_final.pdf"
								},
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"Mytre\",\n\"LastName\": \"Aaronyrt\",\n\n\"Email\": \"Kyla3@hotmail.com\",\n\"Allergy\": \"Milk\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"Tripuri\",\n\"DateOfBirth\": \"1977-01-14\"\n}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"type": "text"
								},
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"Moee\",\n\"LastName\": \"Aaronyrt\",\n\"ContactNumber\": \"9780007000\",\n\"Email\": \"Kyla3@hotmail.com\",\n\"Allergy\": \"Milk\",\n\"FoodPreference\": \"Jain\",\n\"CuisineCategory\":\"Tripuri\",\n\"DateOfBirth\": \"1977-01-14\"\n}",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient/{{patientId1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"{{patientId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "add new reports with vitals for existing patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" pre script\");\r",
									"\r",
									"//Set patientInfo and vitals values\r",
									"let patientInfo = pm.variables.get(\"patientInfo\");\r",
									"if(patientInfo.ContactNumber === \"$RAN\"){\r",
									"let contactNumber = pm.variables.replaceIn('{{$randomPhoneNumber}}').replaceAll(\"-\",\"\");\r",
									"patientInfo.ContactNumber=contactNumber;\r",
									"}\r",
									"\r",
									"let str = JSON.stringify(patientInfo);\r",
									"pm.variables.set(\"patientInfo\",str);\r",
									"\r",
									"let vitals = pm.variables.get(\"vitals\");\r",
									"let strVitals = JSON.stringify(vitals);\r",
									"pm.variables.set(\"vitals\",strVitals);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"//Validation for status code\r",
									"let statusCode = pm.variables.get(\"statusCode\");\r",
									"pm.test(\"Status code is  \" + statusCode, function () {\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "0ncOJSZ2Y/Diabetic and Hemogram Test_Thyrocare lab.pdf.pdf"
								},
								{
									"key": "patientInfo",
									"value": "{ \"FirstName\": \"boaz\",\n\"LastName\": \"roy\",\n\"ContactNumber\": \"9789900001\",\n\"Email\": \"Waldo45@yahoo.com\",\n\"Allergy\": \"soy\",\n\"FoodPreference\": \"VEGAN\",\n\"CuisineCategory\":\"indian\",\n\"DateOfBirth\": \"1970-01-14\"\n}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "vitals",
									"value": "{ \"Weight\": 104.9,\n\"Height\": 40.0,\n\"Temperature\": 99.0,\n\"SP\": 9,\n\"DP\": 8\n}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "patientInfo",
									"value": "{{patientInfo}}",
									"type": "text"
								},
								{
									"key": "vitals",
									"value": "{{vitals}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient/newReports/{{patientId1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"newReports",
								"{{patientId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "patient morbidity details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"//Checking the status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking if content value is same or not\r",
									"    pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"//checking value type\r",
									" const jsonData = pm.response.json();\r",
									"\r",
									" const fileId = jsonData[0].fileId;\r",
									" console.log(\"fileId: \" + fileId);\r",
									"\r",
									" pm.collectionVariables.set(\"fileId\", fileId);\r",
									"\r",
									" pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(fileId).to.be.a(\"string\");\r",
									"  //pm.expect(jsonData[0].fileName).to.be.a(\"string\");\r",
									"  //pm.expect(jsonData[0].uploadDate).to.be.a(\"float\");\r",
									"  //pm.expect(jsonData[0].morbidConditions).to.be.an(\"array\");\r",
									" // pm.expect(jsonData[0].vitals).to.be.an(\"array\");\r",
									"  //pm.expect(jsonData[0].morbidConditionStr).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									" \r",
									"//Schema validation - pass\r",
									"var schema={  \r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"fileId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"fileName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"uploadDate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidConditions\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"HbA1c\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"Average Glucose\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"HbA1c\",\r",
									"            \"Average Glucose\"\r",
									"          ]\r",
									"        },\r",
									"        \"vitals\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        },\r",
									"        \"morbidConditionStr\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"fileId\",\r",
									"        \"fileName\",\r",
									"        \"uploadDate\",\r",
									"        \"morbidConditions\",\r",
									"        \"vitals\",\r",
									"        \"morbidConditionStr\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"fileId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"fileName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"uploadDate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"morbidConditions\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T3\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T3\",\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        },\r",
									"        \"vitals\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        },\r",
									"        \"morbidConditionStr\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"fileId\",\r",
									"        \"fileName\",\r",
									"        \"uploadDate\",\r",
									"        \"morbidConditions\",\r",
									"        \"vitals\",\r",
									"        \"morbidConditionStr\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"/*\r",
									"pm.test(\"Response contains valid JSON data\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"*/\r",
									"    "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/{{patientId1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"{{patientId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "N- patient morbidity details wiith no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Defining the expected error message\r",
									"var expectedErrorMessage = \"Unauthorized\";\r",
									"\r",
									"// Validate that the status code is 401\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Validate that the 'error' field is 'Unauthorized'\r",
									"pm.test(\"Error field is 'Unauthorized'\", function () {\r",
									"    pm.expect(responseBody.error).to.eql(expectedErrorMessage);\r",
									"});\r",
									"\r",
									"\r",
									"//validating json schema\r",
									"const schema={\r",
									"    \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"        pm.test('Validate JsonSchema Response', function() {\r",
									"        pm.response.to.have.status(401);\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/{{patientId1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"{{patientId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-patient morbidity details with invalid file id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"// Validate that the status code is 401\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test if the response body is empty\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"// Check if the response body is empty\r",
									"pm.expect(pm.response.text().trim()).to.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}//patient/66ac27c23e6c022b073da303",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"",
								"patient",
								"66ac27c23e6c022b073da303"
							]
						}
					},
					"response": []
				},
				{
					"name": "all patients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"//status code validation\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// validating content type in header\r",
									"     pm.test(\"Content-Type header is present\", () => {\r",
									"     pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"/*\r",
									"//Retrieving fileId from Json body\r",
									"let bodyData = pm.response.json();\r",
									"let fileId = \"\";\r",
									"let fileMorbidity = bodyData[\"FileMorbidity\"];\r",
									"Object.entries(fileMorbidity).forEach(([key, value]) => {\r",
									"    fileId = key;\r",
									"    pm.collectionVariables.set(\"fileId\",fileId);\r",
									"});\r",
									"\r",
									"\r",
									"//Schema Validation\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"patientId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"FirstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"LastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ContactNumber\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Allergy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FoodPreference\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"CuisineCategory\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"FileMorbidity\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        fileId: {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"T3\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"T4\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"TSH\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"T3\",\r",
									"            \"T4\",\r",
									"            \"TSH\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        fileId\r",
									"      ]\r",
									"    },\r",
									"    \"FileMorbidityCondition\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        fileId: {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"         fileId\r",
									"      ]\r",
									"    },\r",
									"    \"DateOfBirth\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"DieticianId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Vitals\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        fileId: {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"Weight\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Height\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"Temperature\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"SP\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"DP\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"Weight\",\r",
									"            \"Height\",\r",
									"            \"Temperature\",\r",
									"            \"SP\",\r",
									"            \"DP\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        fileId\r",
									"      ]\r",
									"    },\r",
									"    \"LastVisitDate\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"patientId\",\r",
									"    \"FirstName\",\r",
									"    \"LastName\",\r",
									"    \"ContactNumber\",\r",
									"    \"Email\",\r",
									"    \"Allergy\",\r",
									"    \"FoodPreference\",\r",
									"    \"CuisineCategory\",\r",
									"    \"FileMorbidity\",\r",
									"    \"FileMorbidityCondition\",\r",
									"    \"DateOfBirth\",\r",
									"    \"DieticianId\",\r",
									"    \"Vitals\",\r",
									"    \"LastVisitDate\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test('Validate JsonSchema Response', function() {\r",
									"        \r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"*/\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-all patients with no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"// Validate that the status code is 401\r",
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(401); \r",
									"});\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Defining the expected error message\r",
									"var expectedErrorMessage = \"Unauthorized\";\r",
									"\r",
									"// Validate that the 'error' field is 'Unauthorized'\r",
									"pm.test(\"Error field is 'Unauthorized'\", function () {\r",
									"    pm.expect(responseBody.error).to.eql(expectedErrorMessage);\r",
									"});\r",
									"\r",
									"\r",
									"//validating json schema\r",
									"const schema={\r",
									"    \r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"timestamp\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"error\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"path\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"timestamp\",\r",
									"    \"status\",\r",
									"    \"error\",\r",
									"    \"path\"\r",
									"  ]\r",
									"}\r",
									"        \r",
									"pm.test('Validate JsonSchema Response', function() {\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    \r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "N- all patients with invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"});\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Defining the expected error message\r",
									"var expectedErrorMessage = \"Not Found\";\r",
									"\r",
									"// Validate that the 'error' field is 'Not Found'\r",
									"pm.test(\"Error field is 'Not Found'\", function () {\r",
									"    pm.expect(responseBody.error).to.eql(expectedErrorMessage);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patien",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patien"
							]
						}
					},
					"response": []
				},
				{
					"name": "retrieve patient file by fileld",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"//Staus code validation\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// validating content type in header\r",
									" pm.test(\"Content-Type header is present\", () => {\r",
									" pm.response.to.have.header(\"Content-Type\");\r",
									" pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/pdf\");\r",
									" });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/viewFile/{{fileId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile",
								"{{fileId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-retrieve patient file by field with invalid url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validating status code\r",
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(404); // Or any other status code you expect for errors\r",
									"});\r",
									"\r",
									"//validating title\r",
									"pm.test(\"Title contains 'HTTP Status 404 – Not Found'\", function () {\r",
									"    var responseBody = pm.response.text(); \r",
									"    var titleTag = responseBody.match(/<title>(.*?)<\\/title>/); // Extract title tag content\r",
									"    \r",
									"    if (titleTag) {\r",
									"        pm.expect(titleTag[1]).to.include(\"HTTP Status 404 – Not Found\");\r",
									"    } else {\r",
									"        pm.expect.fail(\"Title tag not found in response body\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{invalidBaseUrl}}",
							"host": [
								"{{invalidBaseUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-retrieve patient with valid url and valid parameters without fileId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"//validation of status code\r",
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"pm.response.to.have.status(400); \r",
									"});\r",
									"//validating the content of error message\r",
									"pm.test(\"Response should contain correct errorCode and errorMessage\", function () {\r",
									"    var jsonData = pm.response.json(); \r",
									"pm.expect(jsonData).to.have.property(\"errorCode\", \"Illegal_Argument\");\r",
									"pm.expect(jsonData).to.have.property(\"errorMessage\", \"For input string: \\\"viewFile\\\"\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/viewFile",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"viewFile"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-deleting patient with existing id in get request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"    pm.response.to.have.status(405); \r",
									"});\r",
									"\r",
									"/*\r",
									"patientId1 = pm.collectionVariables.get(\"patientId1\");\r",
									"\r",
									"//validating the content of error message\r",
									"pm.test(\"Response should contain correct errorCode and errorMessage\", function () {\r",
									"var jsonData = pm.response.json(); \r",
									"pm.expect(jsonData).to.have.property(\"errorCode\", \"NOT_FOUND\");\r",
									"pm.expect(jsonData).to.have.property(\"errorMessage\", `Patient not found with patientId : ${patientId1}`);\r",
									"});\r",
									"\r",
									"*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/{{patientId1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"{{patientId1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Morbidity",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "P-retrieve all morbidities with valid url & admin token auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Morbidity Module\");\r",
											"console.log(\"Retrieve All Morbidities using admin token\");\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											" jsonData = pm.response.json();\r",
											" pm.collectionVariables.set(\"morbidityName\", jsonData[0].morbidityTestName);\r",
											" pm.collectionVariables.set(\"partialMorbidityName\", \"P\");\r",
											"\r",
											"pm.test(\"Comparing Morbidityname value with expected value\", function () {\r",
											"var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"console.log(\"Value of Morbidity name in Response body is \" ,morbidityname);\r",
											"\r",
											" // Check if 'morbidityTestName' exists in the recieved response\r",
											" console.log(\"morbidityTestName value:\", jsonData[0].morbidityTestName);\r",
											"         pm.expect(morbidityname).to.eql(pm.collectionVariables.get('morbidityName'));\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve all morbidities for post req",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Negative scenario: Checking response for invalid request type-POST\");\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"  pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code encountered in Response body: Method Not Allowed\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"error\", jsonData.error);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error encountered in Response body:\", error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve all morbidities -no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All Morbidities with No Auth\");\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code encountered in Response Body is: Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"error\", jsonData.error);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve all morbidities -invalid base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All Morbidities with Invalid Baseurl\");\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"  pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalidBaseUrl}}/login",
									"host": [
										"{{invalidBaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve all morbidities -Invalid EndPoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All Morbidities with Invalid Endpoint\");\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"  pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//Checking for Error in Response Body\r",
											"pm.test(\"Error code in Response Body: Not Found\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"error\", jsonData.error);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/Login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"Login"
									]
								}
							},
							"response": []
						},
						{
							"name": "P-retrieve morbidities using valid morbidity name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve Morbidities using Morbidty Name With Valid Auth\");\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											"//Comparing Morbidity name in Response\r",
											"pm.test(\"Validating TestName\", function () {\r",
											" jsonData = pm.response.json();\r",
											" pm.collectionVariables.set(\"morbidityName\", jsonData[0].morbidityTestName);\r",
											"\r",
											"//storing in new variable for printing purpose\r",
											"var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"console.log(\"Value of Morbidity name:\" ,morbidityname);\r",
											"\r",
											" // Check if 'morbidityTestName' exists in the response\r",
											" console.log(\"morbidityTestName value:\", morbidityname);\r",
											"         pm.expect(morbidityname).to.eql(pm.collectionVariables.get('morbidityName'));\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{morbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{morbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "P-retrieve morbidities using partial morbidity name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve Morbidities using Partial Morbidty Name With Valid Auth\");\r",
											"\r",
											"//Test to validate response code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											" jsonData = pm.response.json();\r",
											" var morbidityName= jsonData[0].morbidityTestName;\r",
											"\r",
											" // Test to validate and store the Morbidity TestName\r",
											" pm.test(\"Validating TestName\", function () {\r",
											" pm.collectionVariables.set(\"morbidityName\", morbidityName);\r",
											"\r",
											"//storing in new variable for printing purpose\r",
											"var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"});\r",
											"\r",
											" // Check if 'morbidityTestName' exists in the response\r",
											" pm.test(\"Comparing passed Morbidity name to morbidity name received in response\" , function () {\r",
											"    var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"\r",
											" if(morbidityname===\"TSH\"){\r",
											"    console.log(\"Morbidity TestName is TSH\");\r",
											"     pm.expect(morbidityName).to.eql(\"TSH\");\r",
											" }\r",
											" else if (morbidityname=== \"Plasma\"){\r",
											"console.log(\"Morbidity Name is Fasting Glucose\");\r",
											" pm.expect(morbidityName).to.inlude(\"Glucose\");\r",
											" }\r",
											" else{\r",
											"    console.log(\"Invalid Morbidity Name\");\r",
											" }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{partialMorbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{partialMorbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities using no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve Morbidities using Morbidty Name With No Auth\");\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"// Check Error in response body\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"error\", jsonData.error);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", error);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/morbidity/{{morbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{morbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities using invalid morbidity name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve Morbidities using Morbidty Name With No Auth\");\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"// Check Error in response body\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"error\", jsonData.error);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{invalid_morbidityname}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{invalid_morbidityname}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dietician Controller",
					"item": [
						{
							"name": "P-retrieve morbidities for dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All morbidities With Dietician Auth\");\r",
											"\r",
											"//Storing response date in variable\r",
											"jsonData = pm.response.json();\r",
											"if(jsonData && jsonData.length > 0){\r",
											"pm.collectionVariables.set(\"morbidityName\", jsonData[0].morbidityTestName);\r",
											"\r",
											"//storing in new variable for printing purpose\r",
											"var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"console.log(\"Value of Morbidity name:\" ,morbidityname);\r",
											"}\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{morbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{morbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities for dietician with patient token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All morbidities With Patient_token Auth\");\r",
											"\r",
											"//Check for Status code\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Check Error in response body\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"error\", jsonData.token);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{patientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities for dietician-invalid auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All morbidities With invalid Auth\");\r",
											"\r",
											"// Check Status Code in response body\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											"// Check Error in response body\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"error\", jsonData.token);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_authtoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities for dietician-no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All morbidities With no Auth\");\r",
											"\r",
											"// Check Status Code in response body\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Check Error in response body\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"error\", jsonData.token);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", error);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "P-retrieve morbidities  for dietician using valid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve morbidities using valid morbidity name\");\r",
											"\r",
											"//Test to validate response code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											" jsonData = pm.response.json();\r",
											" if(jsonData && jsonData.length > 0){\r",
											" var morbidityName= jsonData[0].morbidityTestName;\r",
											"\r",
											" // Test to validate and store the Morbidity TestName\r",
											" pm.test(\"Validating TestName\", function () {\r",
											" pm.collectionVariables.set(\"morbidityName\", morbidityName);\r",
											"\r",
											"//storing in new variable for printing purpose\r",
											"var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"});\r",
											" }\r",
											"\r",
											" // Check if 'morbidityTestName' exists in the response\r",
											" pm.test(\"Comparing passed Morbidity name to morbidity name received in response\" , function () {\r",
											"    var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"\r",
											" if(morbidityname===\"TSH\"){\r",
											"    console.log(\"Morbidity TestName is TSH\");\r",
											"     pm.expect(morbidityName).to.eql(\"TSH\");\r",
											" }\r",
											" else if (morbidityname=== \"Plasma\"){\r",
											"console.log(\"Morbidity Name is Fasting Glucose\");\r",
											" pm.expect(morbidityName).to.inlude(\"Glucose\");\r",
											" }\r",
											" else{\r",
											"    console.log(\"Invalid Morbidity Name\");\r",
											" }\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{morbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{morbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities  for dietician using wrong testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve morbidities using invalid morbidity name\");\r",
											"\r",
											"//Validate status code in response body\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"error\", jsonData.token);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{invalid_morbidityname}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{invalid_morbidityname}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities  for dietician using partial morbidityname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve morbidities using partial morbidity name\");\r",
											"\r",
											"//Test to validate response code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											" jsonData = pm.response.json();\r",
											" var morbidityName= jsonData[0].morbidityTestName;\r",
											"\r",
											" // Test to validate and store the Morbidity TestName\r",
											" pm.test(\"Validating TestName\", function () {\r",
											" pm.collectionVariables.set(\"morbidityName\", morbidityName);\r",
											"var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"});\r",
											"\r",
											" // Check if 'morbidityTestName' exists in the response\r",
											" pm.test(\"Comparing passed Morbidity name to morbidity name received in response\" , function () {\r",
											"    var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"\r",
											" if(morbidityname===\"TSH\"){\r",
											"    console.log(\"Morbidity TestName is TSH\");\r",
											"     pm.expect(morbidityName).to.eql(\"TSH\");\r",
											" }\r",
											" else if (morbidityname=== \"Plasma\"){\r",
											"console.log(\"Morbidity Name is Fasting Glucose\");\r",
											" pm.expect(morbidityName).to.inlude(\"Glucose\");\r",
											" }\r",
											" else{\r",
											"    console.log(\"Invalid Morbidity Name\");\r",
											" }\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{partialMorbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{partialMorbidityName}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "P - logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Logout\");\r",
									"\r",
									" pm.test(\"Validate Status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validating the Response values\r",
									"\r",
									"pm.test(\"Assertion Validation for Successful Dietician Logout\", function () {\r",
									"pm.expect(pm.response.text()).to.equal(\"Logout successful\");\r",
									"});\r",
									"\r",
									"// Response header\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/plain;charset=UTF-8\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logoutdietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logoutdietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "N - logout with invalid method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Logout\");\r",
									"\r",
									" pm.test(\"Validate Status code is 405\", function () {\r",
									" pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Validating the Response values\r",
									" pm.test(\"Assertion Validation for Response Error\", function () {\r",
									" const response=pm.response.json();\r",
									"pm.expect(response.error).to.eql(\"Method Not Allowed\");\r",
									" console.log(\"Error:\", response.error); \r",
									" });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logoutdietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logoutdietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "N -logout with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Logout\");\r",
									"\r",
									"// Validating the Status\r",
									"pm.test(\"Validate Status code is 401\", function () {\r",
									"pm.response.to.have.status(401);\r",
									" });\r",
									"\r",
									"// Validating the Response values\r",
									" pm.test(\"Assertion Validation for Response Error\", function () {\r",
									" const response=pm.response.json();\r",
									"pm.expect(response.error).to.eql(\"Unauthorized\");\r",
									" console.log(\"Error:\", response.error); \r",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logoutdietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logoutdietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "N -logout with empty token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Logout\");\r",
									"\r",
									"// Validating the Status\r",
									"pm.test(\"Validate Status code is 401\", function () {\r",
									"pm.response.to.have.status(401);\r",
									" });\r",
									"\r",
									"// Validating the Response values\r",
									" pm.test(\"Assertion Validation for Response Error\", function () {\r",
									" const response=pm.response.json();\r",
									"pm.expect(response.error).to.eql(\"Unauthorized\");\r",
									" console.log(\"Error:\", response.error); \r",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logoutdietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logoutdietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "N -logout with invalid auth type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Logout\");\r",
									"\r",
									"// Validating the Status\r",
									"pm.test(\"Validate Status code is 401\", function () {\r",
									"pm.response.to.have.status(401);\r",
									" });\r",
									"\r",
									"// Validating the Response values\r",
									" pm.test(\"Assertion Validation for Response Error\", function () {\r",
									" const response=pm.response.json();\r",
									"pm.expect(response.error).to.eql(\"Unauthorized\");\r",
									" console.log(\"Error:\", response.error); \r",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logoutdietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logoutdietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "N - logout with invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Logout\");\r",
									"\r",
									"// Validating the Status\r",
									"pm.test(\"Validate Status code is 404\", function () {\r",
									"pm.response.to.have.status(404);\r",
									" });\r",
									"\r",
									"// Validating the Response values\r",
									" pm.test(\"Assertion Validation for Response Error\", function () {\r",
									" const response=pm.response.json();\r",
									"pm.expect(response.error).to.eql(\"Not Found\");\r",
									" console.log(\"Error:\", response.error); \r",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logoutdietician/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logoutdietician",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "N - logout with invalid base url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Logout\");\r",
									"\r",
									"// Validating the Status\r",
									"pm.test(\"Validate Status code is 404\", function () {\r",
									"pm.response.to.have.status(404);\r",
									" });\r",
									"\r",
									"// Get the response body as a string\r",
									"const responseBody1 = pm.response.text()\r",
									"\r",
									"// Load the response body into cheerio\r",
									"const $ = cheerio.load(responseBody1);\r",
									"\r",
									"// Extract the content of the <h1> tag\r",
									"const h1Content = $('h1').text();\r",
									"\r",
									"// Log the content of the <h1> tag to the console\r",
									"console.log(h1Content);\r",
									"\r",
									"// Set the extracted <h1> content as an environment variable\r",
									"pm.environment.set('h1Content', h1Content);\r",
									"\r",
									"// Optionally, you can assert the content if you expect a specific value\r",
									"pm.test('Check <h1> content', function() {\r",
									"pm.expect(h1Content).to.eql('HTTP Status 404 – Not Found');\r",
									"\r",
									" });\r",
									"\r",
									"\r",
									"   \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{invalidBaseUrl}}/logoutdietician",
							"host": [
								"{{invalidBaseUrl}}"
							],
							"path": [
								"logoutdietician"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Clean",
			"item": [
				{
					"name": "N-deleting patient with invalid url and invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"//validating status code\r",
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"pm.response.to.have.status(404); \r",
									"});\r",
									"//validating title\r",
									"pm.test(\"Title contains 'HTTP Status 404 – Not Found'\", function () {\r",
									"var responseBody = pm.response.text(); // Get the response body as text\r",
									"var titleTag = responseBody.match(/<title>(.*?)<\\/title>/); // Extract title tag content\r",
									"    \r",
									"if (titleTag) {\r",
									"        pm.expect(titleTag[1]).to.include(\"HTTP Status 404 – Not Found\");\r",
									" } else {\r",
									"        pm.expect.fail(\"Title tag not found in response body\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{invalidBaseUrl}}/3456",
							"host": [
								"{{invalidBaseUrl}}"
							],
							"path": [
								"3456"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-delete patient with non existing Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"pm.test(\"Check if the response status code is an error\", function () {\r",
									"pm.response.to.have.status(404); \r",
									"});\r",
									"//validating the content of error message\r",
									"pm.test(\"Response should contain correct errorCode and errorMessage\", function () {\r",
									"var jsonData = pm.response.json(); \r",
									"pm.expect(jsonData).to.have.property(\"errorCode\", \"NOT_FOUND\");\r",
									"pm.expect(jsonData).to.have.property(\"errorMessage\", \"Patient not found with patientId : 2345\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/234500",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"234500"
							]
						}
					},
					"response": []
				},
				{
					"name": "N-delete patient with no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Defining the expected error message\r",
									"var expectedErrorMessage = \"Unauthorized\";\r",
									"\r",
									"// Validate that the status code is 401\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Validate that the 'error' field is 'Unauthorized'\r",
									"pm.test(\"Error field is 'Unauthorized'\", function () {\r",
									"    pm.expect(responseBody.error).to.eql(expectedErrorMessage);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/testReports/{{patientId1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"{{patientId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete dietician",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"//validating the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/dietician/{{dieticianId1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								"{{dieticianId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete dietician2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"//validating the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/dietician/{{dieticianId2}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								"{{dieticianId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete by patient Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"//validating the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    \r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/{{patientId1}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"{{patientId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete by patient Id2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In \" + pm.info.requestName +  \" Post response script\");\r",
									"\r",
									"//validating the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"    \r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dieticianToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/{{patientId2}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"{{patientId2}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.log(\"In Collection Pre-request\");\r",
					"console.log(\"In Collection \" + pm.collectionVariables.get(\"adminToken\"));\r",
					"//  let username = data[\"Create User\"]['userName'];\r",
					"//  let password = data[\"Create User\"]['psw'];\r",
					"if(pm.collectionVariables.get(\"adminToken\")==\"\"|| pm.collectionVariables.get(\"adminToken\" )== null){\r",
					"    {\r",
					"        console.log(\"Calling Generated Admin Token\");\r",
					"        const getTokenReq = {\r",
					"            url: pm.environment.get(\"baseurl\") + '/login',\r",
					"            method: 'POST',\r",
					"            header: {'Content-Type': 'application/json'},\r",
					"            body: {\r",
					"                mode:'raw',\r",
					"                raw: JSON.stringify({\r",
					"                    \"userLoginEmail\": \"Team11@gmail.com\", \r",
					"                    \"password\": \"test\" \r",
					"                    \r",
					"                })\r",
					"            }\r",
					"        };\r",
					"        console.log( getTokenReq.url);\r",
					"    pm.sendRequest(getTokenReq,function(err, response){\r",
					"        if(err){\r",
					"            console.log(err)\r",
					"        }else{\r",
					"            console.log(\"Collection Response Token: \" + response.json().token)\r",
					"            pm.collectionVariables.set(\"adminToken\",response.json().token);\r",
					"        }\r",
					"    });\r",
					"    }\r",
					"\r",
					"}\r",
					"\r",
					"//Retrieve and assign requestData from Json to variables if not already set\r",
					"\r",
					"const requestData = pm.variables.get(\"requestData\");\r",
					"\r",
					"if(typeof requestData !== 'object' || requestData === null){\r",
					"    pm.variables.set(\"requestData\", pm.iterationData.get(\"requests\"));\r",
					"\r",
					"}\r",
					"\r",
					"// Update requestData variable\r",
					"const updatedRequestData = pm.variables.get('requestData');\r",
					"\r",
					"// Validate if requestData is properly set and not empty\r",
					"if (typeof updatedRequestData !== 'object' || updatedRequestData === null || Object.keys(updatedRequestData).length === 0) {\r",
					"    console.log('Json data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"// Find the data for the current request\r",
					"const currentRequest = updatedRequestData.find(({ reqname }) => reqname === pm.info.requestName);\r",
					"\r",
					"if (!currentRequest) {\r",
					"    console.log(`Request: ${pm.info.requestName} has no data.`);\r",
					"    return;\r",
					"}\r",
					"\r",
					"// Process the current request's data\r",
					"const variables = currentRequest.data.shift();\r",
					"if (variables) {\r",
					"    Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"\r",
					"        console.log(\"key\" + key);\r",
					"        console.log(\"Value\" + value);\r",
					"    });\r",
					"\r",
					"    // Update requestData variable with possibly modified data\r",
					"    pm.variables.set('requestData', updatedRequestData);\r",
					"\r",
					"    // Set the next request if there is more data to process\r",
					"    if (currentRequest.data.length > 0) {\r",
					"        pm.execution.setNextRequest(pm.info.requestName);\r",
					"    }\r",
					"}\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.log(\"In Collection Post Script\");\r",
					"\r",
					"//Collection variable clean up\r",
					"\r",
					"pm.collectionVariables.clear();"
				]
			}
		}
	],
	"variable": [
		{
			"key": "adminToken",
			"value": ""
		}
	]
}
