{
	"info": {
		"_postman_id": "8c2bc9b3-1d13-4dee-97d9-e6d51e7c1b3a",
		"name": "Team11_APIExplorers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32668815",
		"_collection_link": "https://web.postman.co/workspace/Team11_APIExplorers_Jul24~d0334863-9256-4f5f-8771-7628c87e74b7/collection/32668815-8c2bc9b3-1d13-4dee-97d9-e6d51e7c1b3a?action=share&source=collection_link&creator=32668815"
	},
	"item": [
		{
			"name": "Dietician",
			"item": [
				{
					"name": "Create Dietician",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"9716952682\",\r\n  \"DateOfBirth\": \"1984-02-11\",\r\n  \"Education\": \"Finance\",\r\n  \"Email\": \"franco57@gmail.com\",\r\n  \"Firstname\": \"Franco\",\r\n  \"HospitalCity\": \"Wayne\",\r\n  \"HospitalName\": \"Chilton\",\r\n  \"HospitalPincode\": \"765432\",\r\n  \"HospitalStreet\": \"563,Daisy lane\",\r\n  \"Lastname\": \"Steward\"\r\n}\r\n\t",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/dietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dietician Token Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJmcmFuY282N0BnbWFpbC5jb20iLCJpYXQiOjE3MjI0ODU1MDQsImV4cCI6MTcyMjUxNDMwNH0.nc0SRKgJ7wiUMyr--uhIkacPGy70ALmhsj8s7CCQN0qNZbbL0RIrm_FHraEnPet_xV24cPnCqrsmLWw0_VuXuw",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"Help77\",\r\n  \"userLoginEmail\": \"franco67@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Dietician",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"   console.log(pm.response.to.have.jsonBody);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ContactNumber\": \"9736546220\",\r\n  \"DateOfBirth\": \"1976-06-21\",\r\n  \"Education\": \"Finance\",\r\n  \"Email\": \"franco2@gmail.com\",\r\n  \"Firstname\": \"Franco\",\r\n  \"HospitalCity\": \"Montvil\",\r\n  \"HospitalName\": \"Chilton\",\r\n  \"HospitalPincode\": \"076532\",\r\n  \"HospitalStreet\": \"563,Daisy lane\",\r\n  \"Lastname\": \"Steward\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Retrieve /Get Dietician",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJmcmFuY282N0BnbWFpbC5jb20iLCJpYXQiOjE3MjI4MzcyODEsImV4cCI6MTcyMjg2NjA4MX0.RyZXU_Xplv5R7iT5SrPOLQ3HT3fNh29DiL9ZAFMHFWXi993kJcJUfGe8MReaFpO_ygMtWCXe_FKULBUO8s64bw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Dietician",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtMTFAZ21haWwuY29tIiwiaWF0IjoxNzIyNDgxNTc2LCJleHAiOjE3MjI1MTAzNzZ9.eLToYnePmlluwsOmeyn3xHM1L127Yww-KP1mvdcRQ1EgSnIszI2G2et_8XxBRHv9RGvkirZZdwr_H4R98hdAmw",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/dietician/{{dieticianId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"dietician",
								"{{dieticianId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Morbidity",
			"item": [
				{
					"name": "Get all Morbidities ",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietician_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/morbidity",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"morbidity"
							]
						}
					},
					"response": []
				},
				{
					"name": "Morbidity by Test name",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{dietician_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/morbidity/TSH",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"morbidity",
								"TSH"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Create Patient",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJmcmFuY282N0BnbWFpbC5jb20iLCJpYXQiOjE3MjI4MzcyODEsImV4cCI6MTcyMjg2NjA4MX0.RyZXU_Xplv5R7iT5SrPOLQ3HT3fNh29DiL9ZAFMHFWXi993kJcJUfGe8MReaFpO_ygMtWCXe_FKULBUO8s64bw",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\"FirstName\": \"Al\",\n\"LastName\": \"Pascal\",\n\"ContactNumber\": \"9212345612\",\n\"Email\": \"alpascal2@gmail.com\",\n\"Allergy\": \"soy\",\n\"FoodPreference\": \"Vegan\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1986-02-14\"}\n",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get/Retrieve Patients",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJmcmFuY282N0BnbWFpbC5jb20iLCJpYXQiOjE3MjI4MzcyODEsImV4cCI6MTcyMjg2NjA4MX0.RyZXU_Xplv5R7iT5SrPOLQ3HT3fNh29DiL9ZAFMHFWXi993kJcJUfGe8MReaFpO_ygMtWCXe_FKULBUO8s64bw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Patient",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJmcmFuY282N0BnbWFpbC5jb20iLCJpYXQiOjE3MjI0ODU1MDQsImV4cCI6MTcyMjUxNDMwNH0.nc0SRKgJ7wiUMyr--uhIkacPGy70ALmhsj8s7CCQN0qNZbbL0RIrm_FHraEnPet_xV24cPnCqrsmLWw0_VuXuw",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "patientInfo",
									"value": "{\"FirstName\": \"Al\",\n\"LastName\": \"Pascale\",\n\"ContactNumber\": \"9712345612\",\n\"Email\": \"alpascal@gmail.com\",\n\"Allergy\": \"milk\",\n\"FoodPreference\": \"JAIN\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1986-02-14\"}\n",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient/{{patientId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Existing patient Report",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJmcmFuY282N0BnbWFpbC5jb20iLCJpYXQiOjE3MjI0ODU1MDQsImV4cCI6MTcyMjUxNDMwNH0.nc0SRKgJ7wiUMyr--uhIkacPGy70ALmhsj8s7CCQN0qNZbbL0RIrm_FHraEnPet_xV24cPnCqrsmLWw0_VuXuw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": " patientInfo",
									"value": "{\"FirstName\": \"Al\",\"LastName\": \"Pascale\",\n\"ContactNumber\": \"9712345612\",\n\"Email\": \"alpascal@gmail.com\",\n\"Allergy\": \"milk\",\n\"FoodPreference\": \"JAIN\",\n\"CuisineCategory\":\"Indian\",\n\"DateOfBirth\": \"1986-02-14\"}",
									"type": "text"
								},
								{
									"key": "vitals",
									"value": "{“Weight“ : 43, “Height” : 5.1,“Temperature” : 72,“SP” : 5,“DP” : 7}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseurl}}/patient/testReports/{{patientId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"testReports",
								"{{patientId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Patient",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJmcmFuY282N0BnbWFpbC5jb20iLCJpYXQiOjE3MjI0ODY4MzgsImV4cCI6MTcyMjUxNTYzOH0._tF3V0Lo6mAgF_rmNxvD-KhLwS-hQfNYFIIRJDxSZoHmeP2YNbVKjgwqXFfpxUjBDk5-aylncx2YxNBJhoRwuw",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/patient/{{patientId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"patient",
								"{{patientId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtMTFAZ21haWwuY29tIiwiaWF0IjoxNzIyNDY4NzMxLCJleHAiOjE3MjI0OTc1MzF9.L2kf5ussYE6v-Xiaqt02Uws_C22mj2R3h6bjtQKvvDxd8txQOJyXDwrFQmhZF8G60YqBJzmYpv-LgTJ2QJY4BQ",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/logoutdietician",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"logoutdietician"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Admin Token generation\");\r",
									"\r",
									"//To get response body -> \"token\" value\r",
									"//bodyData = pm.response.json();\r",
									"\r",
									"//token_value = bodyData.token;\r",
									"\r",
									"//To check in the console\r",
									"////console.log(\"Token: \" + token_value);\r",
									"\r",
									"//Setting token as global variable to use in collections\r",
									"//pm.globals.set(\"admin_token\", token_value);\r",
									"\r",
									"//Setting UserLoginEmail and Password Dynamically\r",
									"\r",
									"//pm.collectionVariables.set(\"password\", pm.iterationData.get(\"Password\"));\r",
									"\r",
									"//pm.collectionVariables.set(\"userLoginEmail\", pm.iterationData.get(\"UserLoginEmail\"));\r",
									"\r",
									"    //To get response body -> \"token\" value\r",
									"\r",
									"        const jsondata=pm.response.json();\r",
									"        token_value = jsondata.token;\r",
									"\r",
									"     //To check in the console\r",
									"        console.log(\"Admin Generated Token: \" + token_value);\r",
									"\r",
									"     //Setting token as Collection variable to use in collections\r",
									"        pm.collectionVariables.set(\"adminToken\", token_value);\r",
									"\r",
									"        //Validating token\r",
									"        pm.test(\"Token should match the expected token\", function () {\r",
									"     const response = pm.response.json();\r",
									"     pm.expect(response.token).to.eql(pm.collectionVariables.get('adminToken'));\r",
									"\r",
									"        });\r",
									"\r",
									"        // Validating the Status\r",
									"        pm.test(\"Validate Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        });\r",
									"\r",
									"         // Validating the Response values\r",
									"        pm.test(\"Assertion Validation for Response\", function () {\r",
									"        const response=pm.response.json();\r",
									"        const roles = response.roles;\r",
									"        \r",
									"        // Log the retrieved role for debugging\r",
									"        console.log(\"Retrieved Role:\", roles[0]);\r",
									"\r",
									"        pm.expect(jsondata.type).to.eql(\"Bearer \");\r",
									"        \r",
									"       // Get the userId from the response and the expected userId from the environment variables\r",
									"        let actualAdminUserId = response.userId;\r",
									"        const expectedAdminUserId = pm.environment.get('adminUserId');\r",
									"        console.log(\"ActualAdminUserID: \" +actualAdminUserId);\r",
									"        console.log(\"ExpectedAdminUserId: \" +expectedAdminUserId);\r",
									"        \r",
									"        //pm.expect(response.userId).to.eql(pm.environment.get('admin_userId'));\r",
									"\r",
									"        // Convert both to strings and perform the assertion\r",
									"        pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
									"        pm.expect(jsondata.loginUserEmail).to.eql(pm.collectionVariables.get('userLoginEmail'));\r",
									"\r",
									"        \r",
									"         });\r",
									"\r",
									"        \r",
									"        // Response header\r",
									"     pm.test(\"Content-Type header is present\", () => {\r",
									"     pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"        });\r",
									"\r",
									"        \r",
									"        const schema={\r",
									"      \"type\": \"object\",\r",
									"     \"properties\": {\r",
									"      \"token\": {\r",
									"      \"type\": \"string\"\r",
									"     },\r",
									"      \"type\": {\r",
									"      \"type\": \"string\"\r",
									"        },\r",
									"     \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"     },\r",
									"     \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"     },\r",
									"      \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"         }\r",
									"       ]\r",
									"      }\r",
									"        },\r",
									"         \"required\": [\r",
									"       \"token\",\r",
									"      \"type\",\r",
									"      \"userId\",\r",
									"      \"loginUserEmail\",\r",
									"      \"roles\"\r",
									"         ]\r",
									"      }\r",
									"        pm.test('Validate JsonSchema Response', function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    \r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "dietician login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"In Dietician Token generation\");\r",
									"\r",
									"//Assigning Dietician Token to Collection Variables\r",
									"\r",
									" jsondata=pm.response.json();\r",
									"dieticianToken_value = jsondata.token;\r",
									"\r",
									"     //To check in the console\r",
									"\r",
									"        console.log(\"Dietician Generated Token: \" + dieticianToken_value);\r",
									"\r",
									"     //Setting token as Collection variable to use in collections\r",
									"\r",
									"        pm.collectionVariables.set(\"dieticianToken\", dieticianToken_value);\r",
									"\r",
									"        //Validating token\r",
									"\r",
									"        pm.test(\"Validating Dietician Token\", function () {\r",
									"       const response = pm.response.json();\r",
									"     pm.expect(response.token).to.eql(pm.collectionVariables.get('dieticianToken'));\r",
									"\r",
									"        });\r",
									"\r",
									"        // Validating the Status\r",
									"\r",
									"        pm.test(\"Validate Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"        });\r",
									"\r",
									"         // Validating the Response values\r",
									"\r",
									"         pm.test(\"Assertion Validation for Response\", function () {\r",
									"         const response=pm.response.json();\r",
									"          const roles = response.roles;\r",
									"         console.log(\"Retrieved Role:\", roles[0]);\r",
									"        \r",
									"        pm.expect(jsondata.type).to.eql(\"Bearer \");\r",
									"\r",
									"        // Get the userId from the response and the expected userId from the environment variables\r",
									"\r",
									"        let actualDieticianUserId = response.userId;\r",
									"        let expectedDieticianUserId = pm.environment.get('dieticianId1');\r",
									"        console.log(\"actualDieticianUserId: \" +actualDieticianUserId);\r",
									"        console.log(\"expectedDieticianUserId: \" +expectedDieticianUserId);\r",
									"        \r",
									"       \r",
									"\r",
									"        // Convert both to strings and perform the assertion\r",
									"\r",
									"        pm.expect(actualDieticianUserId.toString()).to.eql(expectedDieticianUserId.toString());\r",
									"        pm.expect(jsondata.loginUserEmail).to.eql(pm.collectionVariables.get('dieticianLoginEmail'));\r",
									"         \r",
									"          });\r",
									"\r",
									"          // Response header\r",
									"     pm.test(\"Content-Type header is present\", () => {\r",
									"     pm.response.to.have.header(\"Content-Type\");\r",
									"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"        });\r",
									"\r",
									"        \r",
									"        const schema={\r",
									"   \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"token\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"loginUserEmail\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"roles\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"token\",\r",
									"    \"type\",\r",
									"    \"userId\",\r",
									"    \"loginUserEmail\",\r",
									"    \"roles\"\r",
									"  ]\r",
									"}\r",
									"        pm.test('Validate JsonSchema Response', function() {\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"\r",
									"          //pm.execution.setNextRequest(\"update dietician\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"password\": \"{{dieticianPassword}}\",\r\n\"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "patient login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/login",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "password",
			"value": "test"
		},
		{
			"key": "userLoginEmail",
			"value": "Team11@gmail.com"
		},
		{
			"key": "adminToken",
			"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUZWFtMTFAZ21haWwuY29tIiwiaWF0IjoxNzIyNzE3NTcyLCJleHAiOjE3MjI3NDYzNzJ9.W3j6L8thubMB134jhcT3eOHDknyYUshNlSom4LDZprmnr1QWmzOJquCNA1XXmhWR4d7sMCFC52qOxeiRnwxrUw",
			"type": "string"
		},
		{
			"key": "dieticianToken",
			"value": ""
		},
		{
			"key": "dieticianLoginEmail",
			"value": "franco67@gmail.com",
			"type": "string"
		},
		{
			"key": "dieticianPassword",
			"value": "Help77",
			"type": "string"
		},
		{
			"key": "adminUserId",
			"value": "7053"
		},
		{
			"key": "dieticianId1",
			"value": "7254",
			"type": "string"
		},
		{
			"key": "patientEmail",
			"value": "alpascal@gmail.com\"",
			"type": "string"
		},
		{
			"key": "patientId1",
			"value": "111",
			"type": "string"
		}
	]
}