{
	"info": {
		"_postman_id": "27d88485-ca44-4404-ad60-b886d9fd9079",
		"name": "Team11_APIExplorers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33908325",
		"_collection_link": "https://team11apiexplorersjul24.postman.co/workspace/Team11_APIExplorers_Jul24~d0334863-9256-4f5f-8771-7628c87e74b7/collection/33908325-27d88485-ca44-4404-ad60-b886d9fd9079?action=share&source=collection_link&creator=33908325"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Admin Login",
					"item": [
						{
							"name": "P - admin login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"    //To get response body -> \"token\" value\r",
											"\r",
											"        const jsondata=pm.response.json();\r",
											"        token_value = jsondata.token;\r",
											"\r",
											"     //To check in the console\r",
											"        console.log(\"Admin Generated Token: \" + token_value);\r",
											"\r",
											"     //Setting token as Collection variable to use in collections\r",
											"        pm.collectionVariables.set(\"adminToken\", token_value);\r",
											"\r",
											"        //Validating token\r",
											"        pm.test(\"Token should match the expected token\", function () {\r",
											"     const response = pm.response.json();\r",
											"     pm.expect(response.token).to.eql(pm.collectionVariables.get('adminToken'));\r",
											"\r",
											"        });\r",
											"\r",
											"        // Validating the Status\r",
											"        pm.test(\"Validate Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        });\r",
											"\r",
											"        // Validating the Response values\r",
											"          pm.test(\"Assertion Validation for Response\", function () {\r",
											"        const response=pm.response.json();\r",
											"        const roles = response.roles;\r",
											"        \r",
											"        // Log the retrieved role for debugging\r",
											"        console.log(\"Retrieved Role:\", roles[0]);\r",
											"\r",
											"        pm.expect(jsondata.type).to.eql(\"Bearer \");\r",
											"        \r",
											"       // Get the userId from the response and the expected userId from the environment variables\r",
											"        let actualAdminUserId = response.userId;\r",
											"        const expectedAdminUserId = pm.collectionVariables.get('adminUserId');\r",
											"        console.log(\"ActualAdminUserID: \" +actualAdminUserId);\r",
											"        console.log(\"ExpectedAdminUserId: \" +expectedAdminUserId);\r",
											"        \r",
											"        //pm.expect(response.userId).to.eql(pm.environment.get('admin_userId'));\r",
											"\r",
											"        // Convert both to strings and perform the assertion\r",
											"        pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											"        pm.expect(jsondata.loginUserEmail).to.eql(pm.environment.get(\"userLoginEmail\"));\r",
											"\r",
											"        \r",
											"         });\r",
											"        \r",
											"        // Response header\r",
											"     pm.test(\"Content-Type header is present\", () => {\r",
											"     pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"        });\r",
											"\r",
											"        \r",
											"        const schema={\r",
											"      \"type\": \"object\",\r",
											"     \"properties\": {\r",
											"      \"token\": {\r",
											"      \"type\": \"string\"\r",
											"     },\r",
											"      \"type\": {\r",
											"      \"type\": \"string\"\r",
											"        },\r",
											"     \"userId\": {\r",
											"      \"type\": \"integer\"\r",
											"     },\r",
											"     \"loginUserEmail\": {\r",
											"      \"type\": \"string\"\r",
											"     },\r",
											"      \"roles\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"         }\r",
											"       ]\r",
											"      }\r",
											"        },\r",
											"         \"required\": [\r",
											"       \"token\",\r",
											"      \"type\",\r",
											"      \"userId\",\r",
											"      \"loginUserEmail\",\r",
											"      \"roles\"\r",
											"         ]\r",
											"      }\r",
											"        pm.test('Validate JsonSchema Response', function() {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"        });\r",
											"    \r",
											"pm.execution.setNextRequest(\"create dietician\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"team\",\r\n  \"userLoginEmail\": \"team11@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response Error\", function () {\r",
											" const response=pm.response.json();\r",
											"        \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });\r",
											"\r",
											"    \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with invalid base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 404\", function () {\r",
											"pm.response.to.have.status(404);\r",
											" });\r",
											"\r",
											"// Get the response body as a string\r",
											"const responseBody1 = pm.response.text()\r",
											"\r",
											"// Load the response body into cheerio\r",
											"const $ = cheerio.load(responseBody1);\r",
											"\r",
											"// Extract the content of the <h1> tag\r",
											"const h1Content = $('h1').text();\r",
											"\r",
											"// Log the content of the <h1> tag to the console\r",
											"console.log(h1Content);\r",
											"\r",
											"// Set the extracted <h1> content as an environment variable\r",
											"pm.environment.set('h1Content', h1Content);\r",
											"\r",
											"// Optionally, you can assert the content if you expect a specific value\r",
											"pm.test('Validating error code', function() {\r",
											"pm.expect(h1Content).to.eql('HTTP Status 404 â€“ Not Found');\r",
											"\r",
											" });\r",
											"\r",
											"\r",
											"\r",
											"   \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalidBaseUrl}}/login",
									"host": [
										"{{invalidBaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with invalid emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											"\r",
											"        \r",
											"     \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{invalidAdminPassword}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with blank password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with blank emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											"\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });\r",
											"\r",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with invalid method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 405\", function () {\r",
											"pm.response.to.have.status(405);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Method Not Allowed\");\r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with both emailId and password invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											" \r",
											"\r",
											"\r",
											"       \r",
											"    \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{invalidAdminPassword}}\",\r\n  \"userLoginEmail\": \"{{invalidAdminEmailId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - admin login with both emailId and password blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Admin Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dietician Login",
					"item": [
						{
							"name": "P - dietician login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"//Assigning Dietician Token to Collection Variables\r",
											"\r",
											" jsondata=pm.response.json();\r",
											"dieticianToken_value = jsondata.token;\r",
											"\r",
											"     //To check in the console\r",
											"\r",
											"        console.log(\"Dietician Generated Token: \" + dieticianToken_value);\r",
											"\r",
											"     //Setting token as Collection variable to use in collections\r",
											"\r",
											"        pm.collectionVariables.set(\"dieticianToken\", dieticianToken_value);\r",
											"\r",
											"        //Validating token\r",
											"\r",
											"        pm.test(\"Validating Dietician Token\", function () {\r",
											"       const response = pm.response.json();\r",
											"     pm.expect(response.token).to.eql(pm.collectionVariables.get('dieticianToken'));\r",
											"\r",
											"        });\r",
											"\r",
											"        // Validating the Status\r",
											"\r",
											"        pm.test(\"Validate Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        });\r",
											"\r",
											"         // Validating the Response values\r",
											"\r",
											"         pm.test(\"Assertion Validation for Response\", function () {\r",
											"         const response=pm.response.json();\r",
											"          const roles = response.roles;\r",
											"         console.log(\"Retrieved Role:\", roles[0]);\r",
											"        \r",
											"        pm.expect(jsondata.type).to.eql(\"Bearer \");\r",
											"\r",
											"        // Get the userId from the response and the expected userId from the environment variables\r",
											"\r",
											"        let actualDieticianUserId = response.userId;\r",
											"        let expectedDieticianUserId = pm.collectionVariables.get('dieticianId1');\r",
											"        console.log(\"actualDieticianUserId: \" +actualDieticianUserId);\r",
											"        console.log(\"expectedDieticianUserId: \" +expectedDieticianUserId);\r",
											"        \r",
											"       \r",
											"\r",
											"        // Convert both to strings and perform the assertion\r",
											"\r",
											"        pm.expect(actualDieticianUserId.toString()).to.eql(expectedDieticianUserId.toString());\r",
											"        pm.expect(jsondata.loginUserEmail).to.eql(pm.collectionVariables.get('dieticianLoginEmail'));\r",
											"         \r",
											"          });\r",
											"\r",
											"          // Response header\r",
											"     pm.test(\"Content-Type header is present\", () => {\r",
											"     pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"        });\r",
											"\r",
											"        \r",
											"        const schema={\r",
											"   \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"token\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"type\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"loginUserEmail\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"roles\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"token\",\r",
											"    \"type\",\r",
											"    \"userId\",\r",
											"    \"loginUserEmail\",\r",
											"    \"roles\"\r",
											"  ]\r",
											"}\r",
											"        pm.test('Validate JsonSchema Response', function() {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"        });\r",
											"\r",
											"          //pm.execution.setNextRequest(\"update dietician\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"password\": \"{{dieticianPassword}}\",\r\n\"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response Error\", function () {\r",
											" const response=pm.response.json();\r",
											"        \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });\r",
											"\r",
											"        \r",
											"   "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with invalid base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 404\", function () {\r",
											"pm.response.to.have.status(404);\r",
											" });\r",
											"\r",
											"// Get the response body as a string\r",
											"const responseBody1 = pm.response.text()\r",
											"\r",
											"// Load the response body into cheerio\r",
											"const $ = cheerio.load(responseBody1);\r",
											"\r",
											"// Extract the content of the <h1> tag\r",
											"const h1Content = $('h1').text();\r",
											"\r",
											"// Log the content of the <h1> tag to the console\r",
											"console.log(h1Content);\r",
											"\r",
											"// Set the extracted <h1> content as an environment variable\r",
											"pm.environment.set('h1Content', h1Content);\r",
											"\r",
											"// Optionally, you can assert the content if you expect a specific value\r",
											"pm.test('Check <h1> content', function() {\r",
											"pm.expect(h1Content).to.eql('HTTP Status 404 â€“ Not Found');\r",
											"\r",
											" });\r",
											"\r",
											"\r",
											"\r",
											"   \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalidBaseUrl}}/login",
									"host": [
										"{{invalidBaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with invalid emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{password}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with blank emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											"\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with invalid method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 405\", function () {\r",
											"pm.response.to.have.status(405);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Method Not Allowed\");\r",
											" });\r",
											"\r",
											"    "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with both emailId and password invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											" \r",
											"\r",
											"\r",
											"       \r",
											"    \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{invalidAdminPassword}}\",\r\n  \"userLoginEmail\": \"{{invalidAdminEmailId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with both emailId and password blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" });\r",
											"\r",
											"  "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - dietician login with blank password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Dietician Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Patient Login",
					"item": [
						{
							"name": "P - patient login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"//Assigning Dietician Token to Collection Variables\r",
											"\r",
											" jsondata=pm.response.json();\r",
											"patientToken_value = jsondata.token;\r",
											"\r",
											"     //To check in the console\r",
											"\r",
											"        console.log(\"Patient Generated Token: \" + patientToken_value);\r",
											"\r",
											"     //Setting token as Collection variable to use in collections\r",
											"\r",
											"        pm.collectionVariables.set(\"patientToken\", patientToken_value);\r",
											"\r",
											"        //Validating token\r",
											"\r",
											"        pm.test(\"Validating Patient Token\", function () {\r",
											"       const response = pm.response.json();\r",
											"     pm.expect(response.token).to.eql(pm.collectionVariables.get('patientToken'));\r",
											"\r",
											"        });\r",
											"\r",
											"        // Validating the Status\r",
											"\r",
											"        pm.test(\"Validate Status code is 200\", function () {\r",
											"        pm.response.to.have.status(200);\r",
											"        });\r",
											"\r",
											"         // Validating the Response values\r",
											"\r",
											"         pm.test(\"Assertion Validation for Response\", function () {\r",
											"         const response=pm.response.json();\r",
											"          const roles = response.roles;\r",
											"         console.log(\"Retrieved Role:\", roles[0]);\r",
											"        \r",
											"        pm.expect(jsondata.type).to.eql(\"Bearer \");\r",
											"\r",
											"        // Get the userId from the response and the expected userId from the environment variables\r",
											"\r",
											"        let actualPatientUserId = response.userId;\r",
											"        let expectedPatientUserId = pm.collectionVariables.get('patientUserID');\r",
											"        console.log(\"ActualPatientUserId: \" +actualPatientUserId);\r",
											"        console.log(\"ExpectedPatientUserId: \" +expectedPatientUserId);\r",
											"        \r",
											"       \r",
											"\r",
											"        // Convert both to strings and perform the assertion\r",
											"\r",
											"        pm.expect(actualPatientUserId.toString()).to.eql(expectedPatientUserId.toString());\r",
											"        pm.expect(jsondata.loginUserEmail).to.eql(pm.collectionVariables.get('patientLoginEmail'));\r",
											"         \r",
											"          });\r",
											"\r",
											"          // Response header\r",
											"     pm.test(\"Content-Type header is present\", () => {\r",
											"     pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
											"        });\r",
											"\r",
											"        \r",
											"        const schema={\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"token\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"type\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"userId\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"loginUserEmail\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"roles\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"token\",\r",
											"    \"type\",\r",
											"    \"userId\",\r",
											"    \"loginUserEmail\",\r",
											"    \"roles\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"        pm.test('Validate JsonSchema Response', function() {\r",
											"        pm.response.to.have.status(200);\r",
											"        pm.response.to.have.jsonSchema(schema);\r",
											"        });\r",
											"\r",
											"          \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response Error\", function () {\r",
											" const response=pm.response.json();\r",
											"        \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with invalid base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 404\", function () {\r",
											"pm.response.to.have.status(404);\r",
											" });\r",
											"\r",
											"// Get the response body as a string\r",
											"const responseBody1 = pm.response.text()\r",
											"\r",
											"// Load the response body into cheerio\r",
											"const $ = cheerio.load(responseBody1);\r",
											"\r",
											"// Extract the content of the <h1> tag\r",
											"const h1Content = $('h1').text();\r",
											"\r",
											"// Log the content of the <h1> tag to the console\r",
											"console.log(h1Content);\r",
											"\r",
											"// Set the extracted <h1> content as an environment variable\r",
											"pm.environment.set('h1Content', h1Content);\r",
											"\r",
											"// Optionally, you can assert the content if you expect a specific value\r",
											"pm.test('Check <h1> content', function() {\r",
											"pm.expect(h1Content).to.eql('HTTP Status 404 â€“ Not Found');\r",
											"\r",
											" });\r",
											"\r",
											"\r",
											"\r",
											"   \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{invalidBaseUrl}}/login",
									"host": [
										"{{invalidBaseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with invalid emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{dieticianLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{dieticianPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with blank password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											"\r",
											"  "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with blank emailId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response ErrorCode and ErrorMessage\", function () {\r",
											" const response=pm.response.json();\r",
											"\r",
											"\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with invalid method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 405\", function () {\r",
											"pm.response.to.have.status(405);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Method Not Allowed\");\r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{patientPassword}}\",\r\n  \"userLoginEmail\": \"{{patientLoginEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with both emailId and password invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" pm.expect(response.errorCode).to.eql(\"Invalid UserName or Password\");\r",
											" console.log(\"Error Code:\", response.errorCode); \r",
											" pm.expect(response.errorMessage).to.eql(\"Bad credentials\")\r",
											" console.log(\"Error Message:\", response.errorMessage); \r",
											" });\r",
											" \r",
											"\r",
											"\r",
											"       \r",
											"    \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"{{invalidAdminPassword}}\",\r\n  \"userLoginEmail\": \"{{invalidAdminEmailId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - patient login with both emailId and password blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Patient Token generation\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Error Response\", function () {\r",
											" const response=pm.response.json();\r",
											" console.log(\"Error:\", response.error);    \r",
											"        \r",
											"        \r",
											" //pm.expect(actualAdminUserId.toString()).to.eql(expectedAdminUserId.toString());\r",
											" pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"\",\r\n  \"userLoginEmail\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout",
					"item": [
						{
							"name": "P - logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Logout\");\r",
											"\r",
											" pm.test(\"Validate Status code is 200\", function () {\r",
											" pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Validating the Response values\r",
											"\r",
											"pm.test(\"Assertion Validation for Successful Dietician Logout\", function () {\r",
											"pm.expect(pm.response.text()).to.equal(\"Logout successful\");\r",
											"});\r",
											"\r",
											"// Response header\r",
											"pm.test(\"Content-Type header is present\", () => {\r",
											"pm.response.to.have.header(\"Content-Type\");\r",
											"pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"text/plain;charset=UTF-8\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/logoutdietician",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - logout with invalid method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Logout\");\r",
											"\r",
											" pm.test(\"Validate Status code is 405\", function () {\r",
											" pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response Error\", function () {\r",
											" const response=pm.response.json();\r",
											"pm.expect(response.error).to.eql(\"Method Not Allowed\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/logoutdietician",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "N -logout with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Logout\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response Error\", function () {\r",
											" const response=pm.response.json();\r",
											"pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/logoutdietician",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "N -logout with empty token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Logout\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response Error\", function () {\r",
											" const response=pm.response.json();\r",
											"pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/logoutdietician",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "N -logout with invalid auth type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Logout\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 401\", function () {\r",
											"pm.response.to.have.status(401);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response Error\", function () {\r",
											" const response=pm.response.json();\r",
											"pm.expect(response.error).to.eql(\"Unauthorized\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/logoutdietician",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - logout with invalid endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Logout\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 404\", function () {\r",
											"pm.response.to.have.status(404);\r",
											" });\r",
											"\r",
											"// Validating the Response values\r",
											" pm.test(\"Assertion Validation for Response Error\", function () {\r",
											" const response=pm.response.json();\r",
											"pm.expect(response.error).to.eql(\"Not Found\");\r",
											" console.log(\"Error:\", response.error); \r",
											" });"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/logoutdietician/login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"logoutdietician",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N - logout with invalid base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Logout\");\r",
											"\r",
											"// Validating the Status\r",
											"pm.test(\"Validate Status code is 404\", function () {\r",
											"pm.response.to.have.status(404);\r",
											" });\r",
											"\r",
											"// Get the response body as a string\r",
											"const responseBody1 = pm.response.text()\r",
											"\r",
											"// Load the response body into cheerio\r",
											"const $ = cheerio.load(responseBody1);\r",
											"\r",
											"// Extract the content of the <h1> tag\r",
											"const h1Content = $('h1').text();\r",
											"\r",
											"// Log the content of the <h1> tag to the console\r",
											"console.log(h1Content);\r",
											"\r",
											"// Set the extracted <h1> content as an environment variable\r",
											"pm.environment.set('h1Content', h1Content);\r",
											"\r",
											"// Optionally, you can assert the content if you expect a specific value\r",
											"pm.test('Check <h1> content', function() {\r",
											"pm.expect(h1Content).to.eql('HTTP Status 404 â€“ Not Found');\r",
											"\r",
											" });\r",
											"\r",
											"\r",
											"   \r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalidBaseUrl}}/logoutdietician",
									"host": [
										"{{invalidBaseUrl}}"
									],
									"path": [
										"logoutdietician"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Morbidity",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "P-retrieve all morbidities with valid url & admin token auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"In Morbidity Module\");\r",
											"console.log(\"Retrieve All Morbidities using admin token\");\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											" jsonData = pm.response.json();\r",
											" pm.collectionVariables.set(\"morbidityName\", jsonData[0].morbidityTestName);\r",
											"\r",
											"pm.test(\"Comparing Morbidityname value with expected value\", function () {\r",
											"var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"console.log(\"Value of Morbidity name in Response body is \" ,morbidityname);\r",
											"\r",
											" // Check if 'morbidityTestName' exists in the recieved response\r",
											" console.log(\"morbidityTestName value:\", jsonData[0].morbidityTestName);\r",
											"         pm.expect(morbidityname).to.eql(pm.collectionVariables.get('morbidityName'));\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve all morbidities for post req",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Negative scenario with invalid request-POST\");\r",
											"pm.test(\"Status code is 405\", function () {\r",
											"  pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code is Method Not Allowed\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"error\", jsonData.error);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve all morbidities -no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All Morbidities with No Auth\");\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"Error_code\", jsonData.error);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", Error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve all morbidities -invalid base url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All Morbidities with Invalid Baseurl\");\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"  pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Error code is Heroku | Application Error\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"Error_code\", jsonData.title);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", error);  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{invalid_baseurl}}/login",
									"host": [
										"{{invalid_baseurl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve all morbidities -Invalid EndPoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All Morbidities with Invalid Endpoint\");\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"  pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code is Not Found\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"Error_code\", jsonData.error);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", Error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/Login",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"Login"
									]
								}
							},
							"response": []
						},
						{
							"name": "P-retrieve morbidities using valid morbidity name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve Morbidities using Morbidty Name With Valid Auth\");\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											"pm.test(\"Validating TestName\", function () {\r",
											" jsonData = pm.response.json();\r",
											" pm.globals.set(\"morbidityName\", jsonData[0].morbidityTestName);\r",
											"\r",
											"//storing in new variable for printing purpose\r",
											"var morbidityname=pm.globals.get(\"morbidityName\");\r",
											"console.log(\"Value of Morbidity name:\" ,morbidityname);\r",
											"\r",
											" // Check if 'morbidityTestName' exists in the response\r",
											" console.log(\"morbidityTestName value:\", jsonData.morbidityTestName);\r",
											"         pm.expect(morbidityname).to.eql(pm.collectionVariables.get('morbidityName'));\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{morbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{morbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "P-retrieve morbidities using partial valid morbidity name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve Morbidities using Partial Morbidty Name With Valid Auth\");\r",
											"//Test to validate response code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											" jsonData = pm.response.json();\r",
											" var morbidityName= jsonData[0].morbidityTestName;\r",
											"\r",
											" // Test to validate and store the Morbidity TestName\r",
											" pm.test(\"Validating TestName\", function () {\r",
											" pm.collectionVariables.set(\"morbidityName\", morbidityName);\r",
											"\r",
											"//storing in new variable for printing purpose\r",
											"var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"});\r",
											"\r",
											" // Check if 'morbidityTestName' exists in the response\r",
											" pm.test(\"Comparing passed Morbidity name to morbidity name received in response\" , function () {\r",
											"    var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"\r",
											" if(morbidityname===\"TSH\"){\r",
											"    console.log(\"Morbidity TestName is TSH\");\r",
											"     pm.expect(morbidityName).to.eql(\"TSH\");\r",
											" }\r",
											" else if (morbidityname=== \"Plasma\"){\r",
											"console.log(\"Morbidity Name is Fasting Glucose\");\r",
											" pm.expect(morbidityName).to.inlude(\"Glucose\");\r",
											" }\r",
											" else{\r",
											"    console.log(\"Invalid Morbidity Name\");\r",
											" }\r",
											"         //pm.expect(morbidityname).to.eql(pm.collectionVariables.get('morbidityName'));\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{partialMorbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{partialMorbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities using no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve Morbidities using Morbidty Name With No Auth\");\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"Error_code\", jsonData.error);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", Error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/morbidity/{{morbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{morbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities using invalid morbidity name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve Morbidities using Morbidty Name With No Auth\");\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"Error_code\", jsonData.error);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", Error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{morbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{morbidityName}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dietician Controller",
					"item": [
						{
							"name": "P-retrieve morbidities for dietician",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All morbidities With Dietician Auth\");\r",
											"\r",
											"jsonData = pm.response.json();\r",
											"pm.globals.set(\"morbidityName\", jsonData[0].morbidityTestName);\r",
											"\r",
											"//storing in new variable for printing purpose\r",
											"var morbidityname=pm.globals.get(\"morbidityName\");\r",
											"console.log(\"Value of Morbidity name:\" ,morbidityname);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{morbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{morbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities for dietician with patient token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All morbidities With Patient_token Auth\");\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"Error_code\", jsonData.token);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", Error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{patientToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities for dietician-invalid auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All morbidities With invalid Auth\");\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"Error_code\", jsonData.token);\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", Error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalid_authtoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities for dietician-no auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve All morbidities With no Auth\");\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"Error_code\", jsonData.token);\r",
											"// Retrieve the global variable 'admin_token'\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", Error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity"
									]
								}
							},
							"response": []
						},
						{
							"name": "P-retrieve morbidities  for dietician using valid testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve morbidities using valid morbidity name\");\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											"pm.test(\"Validating TestName\", function () {\r",
											" jsonData = pm.response.json();\r",
											" pm.globals.set(\"morbidityName\", jsonData[0].morbidityTestName);\r",
											"\r",
											"//storing in new variable for printing purpose\r",
											"var morbidityname=pm.globals.get(\"morbidityName\");\r",
											"console.log(\"Value of Morbidity name:\" ,morbidityname);\r",
											"\r",
											" // Check if 'morbidityTestName' exists in the response\r",
											" console.log(\"morbidityTestName value:\", jsonData.morbidityTestName);\r",
											"         pm.expect(morbidityname).to.eql(pm.collectionVariables.get('morbidityName'));\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{morbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{morbidityName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities  for dietician using wrong testname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve morbidities using invalid morbidity name\");\r",
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"  pm.response.to.have.status(401);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											"pm.test(\"Error code is Unauthorized\", function () {\r",
											" jsonData = pm.response.json();\r",
											"pm.collectionVariables.set(\"Error_code\", jsonData.token);\r",
											"// Retrieve the global variable 'admin_token'\r",
											"var error = pm.collectionVariables.get(\"error\");\r",
											"console.log(\"Error:\", Error);\r",
											"  \r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{invalid_morbidityname}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{invalid_morbidityname}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "N-retrieve morbidities  for dietician using partial morbidityname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Retrieve morbidities using partial morbidity name\");\r",
											"\r",
											"//Test to validate response code\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"  //pm.response.to.have.error(Unauthorized);\r",
											"});\r",
											"\r",
											" jsonData = pm.response.json();\r",
											" var morbidityName= jsonData[0].morbidityTestName;\r",
											"\r",
											" // Test to validate and store the Morbidity TestName\r",
											" pm.test(\"Validating TestName\", function () {\r",
											" pm.collectionVariables.set(\"morbidityName\", morbidityName);\r",
											"var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"});\r",
											"\r",
											" // Check if 'morbidityTestName' exists in the response\r",
											" pm.test(\"Comparing passed Morbidity name to morbidity name received in response\" , function () {\r",
											"    var morbidityname=pm.collectionVariables.get(\"morbidityName\");\r",
											"\r",
											" if(morbidityname===\"TSH\"){\r",
											"    console.log(\"Morbidity TestName is TSH\");\r",
											"     pm.expect(morbidityName).to.eql(\"TSH\");\r",
											" }\r",
											" else if (morbidityname=== \"Plasma\"){\r",
											"console.log(\"Morbidity Name is Fasting Glucose\");\r",
											" pm.expect(morbidityName).to.inlude(\"Glucose\");\r",
											" }\r",
											" else{\r",
											"    console.log(\"Invalid Morbidity Name\");\r",
											" }\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{dieticianToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/morbidity/{{partialMorbidityName}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"morbidity",
										"{{partialMorbidityName}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"console.log(\"In Collection Pre-request\");\r",
					"console.log(\"In Collection \" + pm.collectionVariables.get(\"adminToken\"));\r",
					"//  let username = data[\"Create User\"]['userName'];\r",
					"//  let password = data[\"Create User\"]['psw'];\r",
					"if(pm.collectionVariables.get(\"adminToken\")==\"\"|| pm.collectionVariables.get(\"adminToken\" )== null){\r",
					"    {\r",
					"        console.log(\"Calling Generated Admin Token\");\r",
					"        const getTokenReq = {\r",
					"            url: pm.environment.get(\"baseurl\") + '/login',\r",
					"            method: 'POST',\r",
					"            header: {'Content-Type': 'application/json'},\r",
					"            body: {\r",
					"                mode:'raw',\r",
					"                raw: JSON.stringify({\r",
					"                    \"userLoginEmail\": \"Team11@gmail.com\", \r",
					"                    \"password\": \"test\" \r",
					"                    \r",
					"                })\r",
					"            }\r",
					"        };\r",
					"        console.log( getTokenReq.url);\r",
					"    pm.sendRequest(getTokenReq,function(err, response){\r",
					"        if(err){\r",
					"            console.log(err)\r",
					"        }else{\r",
					"            console.log(\"Collection Response Token: \" + response.json().token)\r",
					"            pm.collectionVariables.set(\"adminToken\",response.json().token);\r",
					"        }\r",
					"    });\r",
					"    }\r",
					"\r",
					"}\r",
					"\r",
					"//Retrieve and assign requestData from Json to variables if not already set\r",
					"\r",
					"const requestData = pm.variables.get(\"requestData\");\r",
					"\r",
					"if(typeof requestData !== 'object' || requestData === null){\r",
					"    pm.variables.set(\"requestData\", pm.iterationData.get(\"requests\"));\r",
					"\r",
					"}\r",
					"\r",
					"// Update requestData variable\r",
					"const updatedRequestData = pm.variables.get('requestData');\r",
					"\r",
					"// Validate if requestData is properly set and not empty\r",
					"if (typeof updatedRequestData !== 'object' || updatedRequestData === null || Object.keys(updatedRequestData).length === 0) {\r",
					"    console.log('Json data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"// Find the data for the current request\r",
					"const currentRequest = updatedRequestData.find(({ reqname }) => reqname === pm.info.requestName);\r",
					"\r",
					"if (!currentRequest) {\r",
					"    console.log(`Request: ${pm.info.requestName} has no data.`);\r",
					"    return;\r",
					"}\r",
					"\r",
					"// Process the current request's data\r",
					"const variables = currentRequest.data.shift();\r",
					"if (variables) {\r",
					"    Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"\r",
					"        console.log(\"key\" + key);\r",
					"        console.log(\"Value\" + value);\r",
					"    });\r",
					"\r",
					"    // Update requestData variable with possibly modified data\r",
					"    pm.variables.set('requestData', updatedRequestData);\r",
					"\r",
					"    // Set the next request if there is more data to process\r",
					"    if (currentRequest.data.length > 0) {\r",
					"        pm.execution.setNextRequest(pm.info.requestName);\r",
					"    }\r",
					"}\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "adminToken",
			"value": ""
		},
		{
			"key": "adminUserId",
			"value": "7053"
		},
		{
			"key": "h1Content",
			"value": "HTTP Status 404 â€“ Not Found"
		},
		{
			"key": "dieticianToken",
			"value": ""
		},
		{
			"key": "dieticianPassword",
			"value": "Help77"
		},
		{
			"key": "dieticianLoginEmail",
			"value": "franco67@gmail.com"
		},
		{
			"key": "dieticianId1",
			"value": "7254"
		},
		{
			"key": "patientToken",
			"value": ""
		},
		{
			"key": "patientLoginEmail",
			"value": "alpascal@gmail.com"
		},
		{
			"key": "patientPassword",
			"value": "test"
		},
		{
			"key": "patientUserID",
			"value": "7308"
		},
		{
			"key": "invalid_morbidityname",
			"value": "Diabetes"
		},
		{
			"key": "partialMorbidityName",
			"value": "TS"
		},
		{
			"key": "invalid_authtoken",
			"value": "hsgdhjs"
		},
		{
			"key": "morbidityName",
			"value": ""
		},
		{
			"key": "Error_code",
			"value": ""
		},
		{
			"key": "error",
			"value": ""
		}
	]
}